// Zwraca stan animacji. Jeśli true, to animacja zostanie odpalona
var animationState = (function() {
    var value = true;
    return {
        change: function() {
            value = !value;
        },
        value: function() {
            return value;
        }
    };
})();

(function() {
    'strict use';
    var ajax_url = jQuery('.global').attr('data-ajax-url');
    var membercard;
    var memberWrapper = $('.memberWrapper');

    $('.link--name').on('click', changePage);
    $(window).on('popstate', changePage);

    function changePage(event) {
        var prevUrl = window.location.href;
        // KLIK //
        if (event.type === 'click') {
            event.preventDefault();
            // Skrolujemy do góry, by pokazać topbar
            $('html').scrollTop(0);

            console.log(event.type);
            membercard = $(this).parents('.membercard');
            var id = membercard.attr('data-id');
            var memberUrl = membercard.find('.link--name').attr('href');
            changeUrl(memberUrl);
            animateMemberPage('hide');

            // zapobiega powtórnemu ładowaniu tego samego członka
            if (memberWrapper.attr('data-current-member') !== id) {
                request({
                    action: 'load_member_page',
                    id: id
                }, addData);
                changeAttrId(id);
                animateOverlay();

            } else {
                animateMemberPage('show');
                animateOverlay();
            }
            // TĘDY-SIĘDY //
        } else if (event.type === 'popstate') {
            console.log(event.type);
            animateOverlay();
            changeUrl(prevUrl);
            tabs.reset();
        }
    }

    function animateOverlay() {
        if (animationState.value()) {
            $('.memberOverlay').addClass('memberOverlay--visible');
            $('html').css({'overflow': 'hidden'});
            $.scrollupbar.destroy('.topbarWrapper');

            console.log("Changing state:", animationState.value());
        } else {
            initTopbar();
            $('.memberOverlay').removeClass('memberOverlay--visible');
            $('html').css({'overflow': 'auto'});

            console.log("Changing state:", animationState.value());
        }
        animationState.change();
        console.log("State changed to:", animationState.value());
    }

    function animateMemberPage(state) {
        if (state === 'show') {
            memberWrapper.removeClass('hidden');
        } else if (state === 'hide') {
            memberWrapper.addClass('hidden');
        }
    }

    function changeUrl(url) {
        if (url != window.location) {
            //add the new page to the window.history
            window.history.pushState({
                path: url
            }, '', url);
        }
    }
    // Dodaje dane w odpowiednie miejsce
    var addData = function(data) {
        // jeśli już coś jest, to usuwa
        if (memberWrapper.children().length > 1) {
            memberWrapper.empty();
        }
        animateMemberPage('show');
        memberWrapper.append(data);
        tabs.init();
    };

    function request(requestingData, addData) {
        $.ajax({
            url: ajax_url,
            type: 'POST',
            data: requestingData,
            success: function(data) {
                addData(data);
                console.log('Data loaded');
                bLazy.revalidate();
            },
            error: function(errorThrown) {
                console.error(errorThrown);
            }
        });
    }

    function changeAttrId(id) {
        memberWrapper[0].setAttribute('data-current-member', id);
    }

    $('.memberOverlay').on('scroll', function () {
        $('html').scrollTop($(this).scrollTop());
    });
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlcyI6WyJtZW1iZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gWndyYWNhIHN0YW4gYW5pbWFjamkuIEplxZtsaSB0cnVlLCB0byBhbmltYWNqYSB6b3N0YW5pZSBvZHBhbG9uYVxudmFyIGFuaW1hdGlvblN0YXRlID0gKGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZSA9IHRydWU7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY2hhbmdlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhbHVlID0gIXZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9O1xufSkoKTtcblxuKGZ1bmN0aW9uKCkge1xuICAgICdzdHJpY3QgdXNlJztcbiAgICB2YXIgYWpheF91cmwgPSBqUXVlcnkoJy5nbG9iYWwnKS5hdHRyKCdkYXRhLWFqYXgtdXJsJyk7XG4gICAgdmFyIG1lbWJlcmNhcmQ7XG4gICAgdmFyIG1lbWJlcldyYXBwZXIgPSAkKCcubWVtYmVyV3JhcHBlcicpO1xuXG4gICAgJCgnLmxpbmstLW5hbWUnKS5vbignY2xpY2snLCBjaGFuZ2VQYWdlKTtcbiAgICAkKHdpbmRvdykub24oJ3BvcHN0YXRlJywgY2hhbmdlUGFnZSk7XG5cbiAgICBmdW5jdGlvbiBjaGFuZ2VQYWdlKGV2ZW50KSB7XG4gICAgICAgIHZhciBwcmV2VXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gICAgICAgIC8vIEtMSUsgLy9cbiAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09ICdjbGljaycpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAvLyBTa3JvbHVqZW15IGRvIGfDs3J5LCBieSBwb2themHEhyB0b3BiYXJcbiAgICAgICAgICAgICQoJ2h0bWwnKS5zY3JvbGxUb3AoMCk7XG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGV2ZW50LnR5cGUpO1xuICAgICAgICAgICAgbWVtYmVyY2FyZCA9ICQodGhpcykucGFyZW50cygnLm1lbWJlcmNhcmQnKTtcbiAgICAgICAgICAgIHZhciBpZCA9IG1lbWJlcmNhcmQuYXR0cignZGF0YS1pZCcpO1xuICAgICAgICAgICAgdmFyIG1lbWJlclVybCA9IG1lbWJlcmNhcmQuZmluZCgnLmxpbmstLW5hbWUnKS5hdHRyKCdocmVmJyk7XG4gICAgICAgICAgICBjaGFuZ2VVcmwobWVtYmVyVXJsKTtcbiAgICAgICAgICAgIGFuaW1hdGVNZW1iZXJQYWdlKCdoaWRlJyk7XG5cbiAgICAgICAgICAgIC8vIHphcG9iaWVnYSBwb3d0w7NybmVtdSDFgmFkb3dhbml1IHRlZ28gc2FtZWdvIGN6xYJvbmthXG4gICAgICAgICAgICBpZiAobWVtYmVyV3JhcHBlci5hdHRyKCdkYXRhLWN1cnJlbnQtbWVtYmVyJykgIT09IGlkKSB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ2xvYWRfbWVtYmVyX3BhZ2UnLFxuICAgICAgICAgICAgICAgICAgICBpZDogaWRcbiAgICAgICAgICAgICAgICB9LCBhZGREYXRhKTtcbiAgICAgICAgICAgICAgICBjaGFuZ2VBdHRySWQoaWQpO1xuICAgICAgICAgICAgICAgIGFuaW1hdGVPdmVybGF5KCk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYW5pbWF0ZU1lbWJlclBhZ2UoJ3Nob3cnKTtcbiAgICAgICAgICAgICAgICBhbmltYXRlT3ZlcmxheSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVMSYRFktU0nEmERZIC8vXG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnQudHlwZSA9PT0gJ3BvcHN0YXRlJykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXZlbnQudHlwZSk7XG4gICAgICAgICAgICBhbmltYXRlT3ZlcmxheSgpO1xuICAgICAgICAgICAgY2hhbmdlVXJsKHByZXZVcmwpO1xuICAgICAgICAgICAgdGFicy5yZXNldCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYW5pbWF0ZU92ZXJsYXkoKSB7XG4gICAgICAgIGlmIChhbmltYXRpb25TdGF0ZS52YWx1ZSgpKSB7XG4gICAgICAgICAgICAkKCcubWVtYmVyT3ZlcmxheScpLmFkZENsYXNzKCdtZW1iZXJPdmVybGF5LS12aXNpYmxlJyk7XG4gICAgICAgICAgICAkKCdodG1sJykuY3NzKHsnb3ZlcmZsb3cnOiAnaGlkZGVuJ30pO1xuICAgICAgICAgICAgJC5zY3JvbGx1cGJhci5kZXN0cm95KCcudG9wYmFyV3JhcHBlcicpO1xuXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNoYW5naW5nIHN0YXRlOlwiLCBhbmltYXRpb25TdGF0ZS52YWx1ZSgpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGluaXRUb3BiYXIoKTtcbiAgICAgICAgICAgICQoJy5tZW1iZXJPdmVybGF5JykucmVtb3ZlQ2xhc3MoJ21lbWJlck92ZXJsYXktLXZpc2libGUnKTtcbiAgICAgICAgICAgICQoJ2h0bWwnKS5jc3MoeydvdmVyZmxvdyc6ICdhdXRvJ30pO1xuXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNoYW5naW5nIHN0YXRlOlwiLCBhbmltYXRpb25TdGF0ZS52YWx1ZSgpKTtcbiAgICAgICAgfVxuICAgICAgICBhbmltYXRpb25TdGF0ZS5jaGFuZ2UoKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJTdGF0ZSBjaGFuZ2VkIHRvOlwiLCBhbmltYXRpb25TdGF0ZS52YWx1ZSgpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhbmltYXRlTWVtYmVyUGFnZShzdGF0ZSkge1xuICAgICAgICBpZiAoc3RhdGUgPT09ICdzaG93Jykge1xuICAgICAgICAgICAgbWVtYmVyV3JhcHBlci5yZW1vdmVDbGFzcygnaGlkZGVuJyk7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RhdGUgPT09ICdoaWRlJykge1xuICAgICAgICAgICAgbWVtYmVyV3JhcHBlci5hZGRDbGFzcygnaGlkZGVuJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaGFuZ2VVcmwodXJsKSB7XG4gICAgICAgIGlmICh1cmwgIT0gd2luZG93LmxvY2F0aW9uKSB7XG4gICAgICAgICAgICAvL2FkZCB0aGUgbmV3IHBhZ2UgdG8gdGhlIHdpbmRvdy5oaXN0b3J5XG4gICAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoe1xuICAgICAgICAgICAgICAgIHBhdGg6IHVybFxuICAgICAgICAgICAgfSwgJycsIHVybCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gRG9kYWplIGRhbmUgdyBvZHBvd2llZG5pZSBtaWVqc2NlXG4gICAgdmFyIGFkZERhdGEgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgIC8vIGplxZtsaSBqdcW8IGNvxZsgamVzdCwgdG8gdXN1d2FcbiAgICAgICAgaWYgKG1lbWJlcldyYXBwZXIuY2hpbGRyZW4oKS5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBtZW1iZXJXcmFwcGVyLmVtcHR5KCk7XG4gICAgICAgIH1cbiAgICAgICAgYW5pbWF0ZU1lbWJlclBhZ2UoJ3Nob3cnKTtcbiAgICAgICAgbWVtYmVyV3JhcHBlci5hcHBlbmQoZGF0YSk7XG4gICAgICAgIHRhYnMuaW5pdCgpO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiByZXF1ZXN0KHJlcXVlc3RpbmdEYXRhLCBhZGREYXRhKSB7XG4gICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICB1cmw6IGFqYXhfdXJsLFxuICAgICAgICAgICAgdHlwZTogJ1BPU1QnLFxuICAgICAgICAgICAgZGF0YTogcmVxdWVzdGluZ0RhdGEsXG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgYWRkRGF0YShkYXRhKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRGF0YSBsb2FkZWQnKTtcbiAgICAgICAgICAgICAgICBiTGF6eS5yZXZhbGlkYXRlKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKGVycm9yVGhyb3duKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvclRocm93bik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNoYW5nZUF0dHJJZChpZCkge1xuICAgICAgICBtZW1iZXJXcmFwcGVyWzBdLnNldEF0dHJpYnV0ZSgnZGF0YS1jdXJyZW50LW1lbWJlcicsIGlkKTtcbiAgICB9XG5cbiAgICAkKCcubWVtYmVyT3ZlcmxheScpLm9uKCdzY3JvbGwnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICQoJ2h0bWwnKS5zY3JvbGxUb3AoJCh0aGlzKS5zY3JvbGxUb3AoKSk7XG4gICAgfSk7XG59KSgpOyJdLCJmaWxlIjoibWVtYmVyLm1pbi5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
