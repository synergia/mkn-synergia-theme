// Zwraca stan animacji. Jeśli true, to animacja zostanie odpalona
var animationState = (function() {
    var value = true;
    return {
        change: function() {
            value = !value;
        },
        value: function() {
            return value;
        }
    };
})();

// Oblicza o ile pixeli przesunąć kartę
function pixelsToCenter(block) {
    var viewCenterX = Math.floor(window.innerWidth / 2);
    var viewCenterY = Math.floor(window.innerHeight / 2);
    var offset = block.offset();
    return {
        x: function() {
            return viewCenterX - Math.floor(offset.left + block.outerWidth() / 2);
        },
        y: function() {
            return viewCenterY - Math.floor(offset.top + block.outerHeight() / 2);

        }
    };
}

(function() {
    'strict use';
    var ajax_url1 = jQuery('.global').attr('data-ajax-url');
    var membercard;

    $('.link--name').on('click', changePage);
    $('.membercard__close').on('click', changePage);

    $(window).on('popstate', changePage);


    function changePage(event) {
        var prevUrl = window.location.href;

        // Dodaje dane w odpowiednie miejsce
        var addData = function(data) {
            membercard.find('.membercard__fullProfile').append(data);
        };

        if (event.type === 'click') {
            event.preventDefault();
            console.log(event.type);

            membercard = $(this).parents('.membercard');

            var id = membercard.attr('data-id');
            var url = membercard.find('.link--name').attr('href');

            changeUrl(url);
            request({
                action: 'load_member_page',
                id: id
            }, addData);
            animateMembercard(membercard);

        } else if (event.type === 'popstate') {
            console.log(event.type);

            animateMembercard(membercard);
            changeUrl(prevUrl);

        }
    }

    function animateMembercard(membercard) {

        if (animationState.value()) {
            membercard.children('membercard__fullProfile').addClass('visible');


            console.log("Changing state:", animationState.value());
        } else {

            console.log("Changing state:", animationState.value());
        }

        animationState.change();
        console.log("State changed to:", animationState.value());

    }

    function changeUrl(url) {
        if (url != window.location) {
            //add the new page to the window.history
            window.history.pushState({
                path: url
            }, '', url);
        }
    }

    function request(requestingData, addData) {
        $.ajax({
            url: ajax_url1,
            type: 'POST',
            data: requestingData,
            success: function(data) {
                addData(data);
                console.log('Data loaded');
                bLazy.revalidate();
            },
            error: function(errorThrown) {
                console.log(errorThrown);
            }
        });
    }
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlcyI6WyJtZW1iZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gWndyYWNhIHN0YW4gYW5pbWFjamkuIEplxZtsaSB0cnVlLCB0byBhbmltYWNqYSB6b3N0YW5pZSBvZHBhbG9uYVxudmFyIGFuaW1hdGlvblN0YXRlID0gKGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZSA9IHRydWU7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY2hhbmdlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhbHVlID0gIXZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9O1xufSkoKTtcblxuLy8gT2JsaWN6YSBvIGlsZSBwaXhlbGkgcHJ6ZXN1bsSFxIcga2FydMSZXG5mdW5jdGlvbiBwaXhlbHNUb0NlbnRlcihibG9jaykge1xuICAgIHZhciB2aWV3Q2VudGVyWCA9IE1hdGguZmxvb3Iod2luZG93LmlubmVyV2lkdGggLyAyKTtcbiAgICB2YXIgdmlld0NlbnRlclkgPSBNYXRoLmZsb29yKHdpbmRvdy5pbm5lckhlaWdodCAvIDIpO1xuICAgIHZhciBvZmZzZXQgPSBibG9jay5vZmZzZXQoKTtcbiAgICByZXR1cm4ge1xuICAgICAgICB4OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB2aWV3Q2VudGVyWCAtIE1hdGguZmxvb3Iob2Zmc2V0LmxlZnQgKyBibG9jay5vdXRlcldpZHRoKCkgLyAyKTtcbiAgICAgICAgfSxcbiAgICAgICAgeTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdmlld0NlbnRlclkgLSBNYXRoLmZsb29yKG9mZnNldC50b3AgKyBibG9jay5vdXRlckhlaWdodCgpIC8gMik7XG5cbiAgICAgICAgfVxuICAgIH07XG59XG5cbihmdW5jdGlvbigpIHtcbiAgICAnc3RyaWN0IHVzZSc7XG4gICAgdmFyIGFqYXhfdXJsMSA9IGpRdWVyeSgnLmdsb2JhbCcpLmF0dHIoJ2RhdGEtYWpheC11cmwnKTtcbiAgICB2YXIgbWVtYmVyY2FyZDtcblxuICAgICQoJy5saW5rLS1uYW1lJykub24oJ2NsaWNrJywgY2hhbmdlUGFnZSk7XG4gICAgJCgnLm1lbWJlcmNhcmRfX2Nsb3NlJykub24oJ2NsaWNrJywgY2hhbmdlUGFnZSk7XG5cbiAgICAkKHdpbmRvdykub24oJ3BvcHN0YXRlJywgY2hhbmdlUGFnZSk7XG5cblxuICAgIGZ1bmN0aW9uIGNoYW5nZVBhZ2UoZXZlbnQpIHtcbiAgICAgICAgdmFyIHByZXZVcmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcblxuICAgICAgICAvLyBEb2RhamUgZGFuZSB3IG9kcG93aWVkbmllIG1pZWpzY2VcbiAgICAgICAgdmFyIGFkZERhdGEgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICBtZW1iZXJjYXJkLmZpbmQoJy5tZW1iZXJjYXJkX19mdWxsUHJvZmlsZScpLmFwcGVuZChkYXRhKTtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ2NsaWNrJykge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGV2ZW50LnR5cGUpO1xuXG4gICAgICAgICAgICBtZW1iZXJjYXJkID0gJCh0aGlzKS5wYXJlbnRzKCcubWVtYmVyY2FyZCcpO1xuXG4gICAgICAgICAgICB2YXIgaWQgPSBtZW1iZXJjYXJkLmF0dHIoJ2RhdGEtaWQnKTtcbiAgICAgICAgICAgIHZhciB1cmwgPSBtZW1iZXJjYXJkLmZpbmQoJy5saW5rLS1uYW1lJykuYXR0cignaHJlZicpO1xuXG4gICAgICAgICAgICBjaGFuZ2VVcmwodXJsKTtcbiAgICAgICAgICAgIHJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgIGFjdGlvbjogJ2xvYWRfbWVtYmVyX3BhZ2UnLFxuICAgICAgICAgICAgICAgIGlkOiBpZFxuICAgICAgICAgICAgfSwgYWRkRGF0YSk7XG4gICAgICAgICAgICBhbmltYXRlTWVtYmVyY2FyZChtZW1iZXJjYXJkKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LnR5cGUgPT09ICdwb3BzdGF0ZScpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGV2ZW50LnR5cGUpO1xuXG4gICAgICAgICAgICBhbmltYXRlTWVtYmVyY2FyZChtZW1iZXJjYXJkKTtcbiAgICAgICAgICAgIGNoYW5nZVVybChwcmV2VXJsKTtcblxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYW5pbWF0ZU1lbWJlcmNhcmQobWVtYmVyY2FyZCkge1xuXG4gICAgICAgIGlmIChhbmltYXRpb25TdGF0ZS52YWx1ZSgpKSB7XG4gICAgICAgICAgICBtZW1iZXJjYXJkLmNoaWxkcmVuKCdtZW1iZXJjYXJkX19mdWxsUHJvZmlsZScpLmFkZENsYXNzKCd2aXNpYmxlJyk7XG5cblxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJDaGFuZ2luZyBzdGF0ZTpcIiwgYW5pbWF0aW9uU3RhdGUudmFsdWUoKSk7XG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ2hhbmdpbmcgc3RhdGU6XCIsIGFuaW1hdGlvblN0YXRlLnZhbHVlKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgYW5pbWF0aW9uU3RhdGUuY2hhbmdlKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiU3RhdGUgY2hhbmdlZCB0bzpcIiwgYW5pbWF0aW9uU3RhdGUudmFsdWUoKSk7XG5cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaGFuZ2VVcmwodXJsKSB7XG4gICAgICAgIGlmICh1cmwgIT0gd2luZG93LmxvY2F0aW9uKSB7XG4gICAgICAgICAgICAvL2FkZCB0aGUgbmV3IHBhZ2UgdG8gdGhlIHdpbmRvdy5oaXN0b3J5XG4gICAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoe1xuICAgICAgICAgICAgICAgIHBhdGg6IHVybFxuICAgICAgICAgICAgfSwgJycsIHVybCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXF1ZXN0KHJlcXVlc3RpbmdEYXRhLCBhZGREYXRhKSB7XG4gICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICB1cmw6IGFqYXhfdXJsMSxcbiAgICAgICAgICAgIHR5cGU6ICdQT1NUJyxcbiAgICAgICAgICAgIGRhdGE6IHJlcXVlc3RpbmdEYXRhLFxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIGFkZERhdGEoZGF0YSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0RhdGEgbG9hZGVkJyk7XG4gICAgICAgICAgICAgICAgYkxhenkucmV2YWxpZGF0ZSgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbihlcnJvclRocm93bikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yVGhyb3duKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufSkoKTsiXSwiZmlsZSI6Im1lbWJlci5taW4uanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
