// main.js //
// Wszystko wrzucamy tu

(function($) {
  'use strict';

  var _destroyFn;

  $.scrollupbar = function($bar, options) {
    // Default options
    options = $.extend({
      enterViewport: $.noop,
      fullyEnterViewport: $.noop,
      exitViewport: $.noop,
      partiallyExitViewport: $.noop
    }, options);

    function isFullyInViewport() {
      return $window.scrollTop() <= $bar.offset().top;
    }

    function isInViewport() {
      return $window.scrollTop() < $bar.offset().top + $bar.outerHeight();
    }

    var $window = $(window),
        $document = $(document),
        minY = $bar.css('position') == 'fixed' ? 0 : $bar.offset().top,
        lastY = $window.scrollTop(), // Use last Y to detect scroll direction.
        initialPosTop = $bar.position().top,
        iOS = /(iPad|iPhone|iPod)/g.test(navigator.userAgent),
        timeout;

    $.scrollupbar.isInViewport = isInViewport();
    $.scrollupbar.isFullyInViewport = isFullyInViewport();

    // iOS can't handle momentum scroll properly (See discussion on
    // http://stackoverflow.com/questions/2863547).
    if (!iOS) {
      $window.on('scroll.scrollupbar', function() {
        var y = $window.scrollTop(),
            barHeight = $bar.outerHeight();

        // Ignore elastic scrolling.
        if (y < 0 || y > ($document.height() - $window.height())) {
          return;
        }

        // Cancel the event fired by the previous scroll.
        if (timeout) {
          clearTimeout(timeout);
        }

        if (y < lastY) { // Scrolling up
          // If the bar is hidden, place it right above the top frame.
          if (!$.scrollupbar.isInViewport && lastY - barHeight >= minY) {
            $bar.css('top', lastY - barHeight);
            $.scrollupbar.isInViewport = true;
            options.enterViewport();
          }

          // Scrolls up bigger than the bar's height fixes the bar on top.
          if (isFullyInViewport()) {
            if (y >= minY) {
              $bar.css({
                'position': 'fixed',
                'top': 0
              });
            } else {
              $bar.css({
                'position': 'absolute',
                'top': initialPosTop
              });
            }

            if (!$.scrollupbar.isFullyInViewport) {
              $.scrollupbar.isFullyInViewport = true;
              options.fullyEnterViewport();
            }
          }

          // Fire an event to reveal the entire bar after 400ms if the scroll
          // wasn't big enough.
          timeout = setTimeout(function() {
            if (!isFullyInViewport()) {
              $bar.css({
                'position': 'fixed',
                'top': $bar.offset().top - y
              });

              $bar.animate({'top': 0}, 100, function() {
                $.scrollupbar.isFullyInViewport = true;
                options.fullyEnterViewport();
              });
            }
          }, 400);
        } else if (y > lastY) { // Scrolling down
          // Unfix the bar allowing it to scroll with the page.
          if ($.scrollupbar.isFullyInViewport) {
            $bar.css({
              'position': 'absolute',
              'top': lastY > minY ? lastY : initialPosTop
            });

            if (!isFullyInViewport()) {
              $.scrollupbar.isFullyInViewport = false;
              options.partiallyExitViewport();
            }
          }

          if ($.scrollupbar.isInViewport && !isInViewport()) {
            $.scrollupbar.isInViewport = false;
            options.exitViewport();
          }

          // Fire an event to hide the entire bar after 400ms if the scroll
          // wasn't big enough.
          timeout = setTimeout(function() {
            if (isInViewport() && y - barHeight >= minY) {
              $bar.animate({'top': y - barHeight}, 100, function() {
                $.scrollupbar.isInViewport = false;
                options.exitViewport();
              });
            }
          }, 400);
        }

        lastY = y;
      });
    } else { // Fallback simplified behaviour for iOS.
      $window.on('touchstart.scrollupbar', function () {
        lastY = $window.scrollTop();
      });

      $window.on('touchend.scrollupbar', function () {
        var y = $window.scrollTop();

        if (y < lastY || y - $bar.outerHeight() < minY) { // Scrolling up
          if (y <= minY) {
            // Restore original position.
            $bar.css({
              'position': 'absolute',
              'top': initialPosTop
            });

            $bar.show(function() {
              $.scrollupbar.isInViewport = true;
              $.scrollupbar.isFullyInViewport = true;
              options.enterViewport();
              options.fullyEnterViewport();
            });
          } else {
            $bar.css({
              'position': 'fixed',
              'top': 0
            });

            $.scrollupbar.isInViewport = true;
            options.enterViewport();

            $bar.slideDown(function() {
              $.scrollupbar.isFullyInViewport = true;
              options.fullyEnterViewport();
            });
          }
        } else if (y > lastY) { // Scrolling down
          $.scrollupbar.isFullyInViewport = false;
          options.partiallyExitViewport();

          $bar.slideUp(function() {
            $.scrollupbar.isInViewport = false;
            options.exitViewport();
          });
        }

        lastY = y;
      });
    }

    _destroyFn = function() {
      // Unbind all listeners added by scrollupbar plugin
      $window.off('.scrollupbar');

      // Restore original bar position.
      $bar.css({
        'position': 'absolute',
        'top': initialPosTop
      });
    };

    return $bar;
  };

  $.scrollupbar.destroy = function() {
    if (_destroyFn) {
      return _destroyFn();
    }
  };

  $.fn.scrollupbar = function(options) {
    return $.scrollupbar(this, options);
  };
})(jQuery);

jQuery(function($) {

  /**
   * Dropy
   * http://codepen.io/Tombek/pen/OPvpLe
   */
  var dropy = {
    $dropys: null,
    openClass: 'open',
    selectClass: 'selected',
    init: function(){
      var self = this;
  
      self.$dropys = $('.dropy');
      self.eventHandler();
    },
    eventHandler: function(){
      var self = this;
  
      // Opening a dropy
      self.$dropys.find('.dropy__title').click(function(){
        self.$dropys.removeClass(self.openClass);
        $(this).parents('.dropy').addClass(self.openClass);
      });
  
      // Click on a dropy list
      self.$dropys.find('.dropy__content ul li a').click(function(){
        var $that = $(this);
        var $dropy = $that.parents('.dropy');
        var $input = $dropy.find('input');
        var $title = $(this).parents('.dropy').find('.dropy__title span');
  
        // Remove selected class
        $dropy.find('.dropy__content a').each(function(){
          $(this).removeClass(self.selectClass);
        });
  
        // Update selected value
        $title.html($that.html());
        $input.val($that.attr('data-value')).trigger('change');
  
        // If back to default, remove selected class else addclass on right element
        if($that.hasClass('dropy__header')){
          $title.removeClass(self.selectClass);
          $title.html($title.attr('data-title'));
        }
        else{
          $title.addClass(self.selectClass);
          $that.addClass(self.selectClass);
        }
  
        // Close dropdown
        $dropy.removeClass(self.openClass);
      });
  
      // Close all dropdown onclick on another element
      $(document).bind('click', function(e){
          if (! $(e.target).parents().hasClass('dropy')){ self.$dropys.removeClass(self.openClass); }
      });
    }
  };
  
  $(function(){
    dropy.init();
  });

    function acts() {
      var te;
      var min = $('.post-list-item-content h2').height();
      $('.post-list-item .post-list-item-content h2').each(function() {
        if ($(this).height() < min)
          min = $(this).height();
      });
  
      $('.post-list-item-content h2').each(function() {
        if ($(this).height() == min) {
          te = $(this).parent().parent().children('.excerpt');
          $(te).text(function(index, currentText) {
            if (currentText.substr(currentText.length - 3) != '\u2026')
              return currentText.substr(0, 150) + '\u2026';
          });
        } else if (($(this).height() < (min - 1) * 3) && ($(this).height() > min)) {
          te = $(this).parent().parent().children('.excerpt');
          $(te).text(function(index, currentText) {
            return currentText.substr(0, 80) + '\u2026';
          });
        } else {
          te = $(this).parent().parent().children('.excerpt');
          $(this).text(function(index, currentText) {
            if ((currentText.substr(currentText.length - 3) != '\u2026') && (currentText.length > 120))
              return currentText.substr(0, 120) + '\u2026';
          });
          te.css("display", "none");
        }
      });
    }
    acts();
    $(window).resize(acts);
  
     function cardExcerpt() {
      $(".card__excerpt").text(function(index, currentText) {
        return currentText.substr(0, 140) + '\u2026';
      });
    }
    cardExcerpt();

  // Pakuje mniejsze obrazki bez podpisu w <figure> //
  // Jeśli obrazek ma tytuł, tym się zajmuje php funkcja w project-functions.php
  $('.project__content p').each(function(index) {
    var some_img = $(this).find('img');
    var width = some_img.width();
    if (width < 980) {
      some_img.wrap("<figure></figure>");
    }
  });

  //Skraca imiona, by nie wychodziły za bloki
  $('.membercard__name a').each(function(index) {
    var length = $(this).html().length;
    if (length > 17) {
      var name = $(this).text();
      $(this).parent().addClass('membercard__name--tooLong');
      // console.log(name);
      var trimmed_name = name.charAt(0) + ". " + name.substr(name.indexOf(' ') + 1);
      // console.log(trimmed_name);
      $(this).text(trimmed_name);
    }
  });
  
  $('.membercardSmall__name a').each(function(index) {
    var length = $(this).html().length;
    if (length > 14) {
      var name = $(this).text();
      // console.log(name);
      var trimmed_name = name.charAt(0) + ". " + name.substr(name.indexOf(' ') + 1);
      // console.log(trimmed_name);
      $(this).text(trimmed_name);
    }
  });

  // Notyfikacje, powiadomienia //
  $(".note-close").click(function() {
    $(this).parent()
      .animate({
        opacity: 0
      }, 250, function() {
        $(this)
          .animate({
            marginBottom: 0
          }, 250)
          .children()
          .animate({
            padding: 0
          }, 250)
          .wrapInner("<div />")
          .children()
          .slideUp(250, function() {
            $(this).closest(".note").remove();
          });
      });
  });

  // Animacje dla banera rekrutacji //
  $('label.button').on('click', function() {
    $('.fb').addClass('animated fadeInUp');
    $('.date .icon-container').addClass('animated slideInLeft');
    $('.date span').addClass('animated slideInLeft');
    $('.location .icon-container').addClass('animated slideInRight');
    $('.location span').addClass('animated slideInRight');
  
  });
  $('#close_banner').on('click', function() {
    $('.fb').removeClass('animated fadeInUp');
    $('.date .icon-container').removeClass('animated slideInLeft');
    $('.date span').removeClass('animated slideInLeft');
    $('.location .icon-container').removeClass('animated slideInRight');
    $('.location span').removeClass('animated slideInRight');
  });
  
  // http://stackoverflow.com/questions/24070627/create-dropdown-banner-when-user-first-visits-website
  // Pozwalają otwierać baner tylko przy pierwszej wizycie
  
  // cookie-js

  //// = partials/show-nicknames.js

  $(document).ready(function(){
      // $("#nav-mobile").html($("#nav-main").html());
      $("#nav-trigger .navicon-button").click(function(){
        console.info('Burger clicked');
          if ($("#nav ul").hasClass("nav__menu--expanded")) {
              $("#nav ul").removeClass("nav__menu--expanded").slideUp(250);
              $(this).removeClass("open");
          } else {
              $("#nav ul").addClass("nav__menu--expanded").slideDown(250);
              $(this).addClass("open");
          }
      });
  });

  $(document).ready(function() {
    Slider = $('#slider').Swipe({
      auto: 0,
      continuous: true,
    }).data('Swipe');
    if (Slider) {
      $('.next').on('click', Slider.next);
      $('.prev').on('click', Slider.prev);
    }
  });

  // przez to gnwo nie działa .on()
  ////= partials/smooth-scrolling.js

  

  (function() {
      // Żeby tooltip nie klikał
      $('.tooltip').on('click', function(e) {
          e.preventDefault();
      });
  
      $('[data-github]').hover(function(e) {
          loadGithub();
          $(this).children('.tooltip').addClass('tooltip--active');
      }, function(e) {
          $(this).children('.tooltip').removeClass('tooltip--active');
      });
  
      $('[data-lastfm]').hover(function(e) {
          loadLastfm();
          $(this).children('.tooltip').addClass('tooltip--active');
      }, function(e) {
          $(this).children('.tooltip').removeClass('tooltip--active');
      });
  })();

  function loadGithub() {
      // Pobiera url z hrefa
      var profileUrl = $('a[data-github]').attr('href');
      // Odpowiednio obcina go do username
      var username = profileUrl.substr(19);
      // Dodaje username do url zapytania
      var requri = 'https://api.github.com/users/' + username;
      // Sprawdza, czy tooltip pusty, by nie generować nowych zapytań
      // i nie dodawać po raz kolejny dane do tooltipa
      if ($('[data-github] .tooltip').is(':empty')) {
          requestJSON(requri, function(json) {
              if (json.message === "Nie znaleziono" || username === '') {
                  $('[data-github] .tooltip').html("<h2>Brak informacji</h2>");
              } else {
                  username = json.login;
                  var profileurl = json.html_url;
                  var reposnum = json.public_repos;
                  var aviurl = json.avatar_url;
  
  
                  var outhtml = '<div class="gh">' +
                      '<h4 class="gh__name"><a class="link" href="' + profileurl + '"><img class="gh__avatar" src="' + aviurl + '">@' + username + '</a></h4>';
                  outhtml = outhtml + '<span class="gh__repos">Repozytoriów: ' + reposnum + '</span><hr/></div>';
                  $('[data-github] .tooltip').append(outhtml);
  
              } // end else statement
          }); // end requestJSON Ajax call
      }
  
      function requestJSON(url, callback) {
          $.ajax({
              url: url,
              complete: function(xhr) {
                  callback.call(null, xhr.responseJSON);
              }
          });
      }
  }

  function loadLastfm() {
      // Pobiera url z hrefa
      var profileUrl = $('a[data-lastfm]').attr('href');
      // Odpowiednio obcina go do username
      var username = profileUrl.substr(27);
      var baseUrl = 'http://ws.audioscrobbler.com/2.0/?method=user.getrecenttracks';
      var api_key = '299020c062c481f083ecd0276c315e3a';
  
      var requestUrl = baseUrl + '&user=' + username + '&api_key=' + api_key + '&format=json';
      console.log(username);
      if ($('[data-lastfm] .tooltip').is(':empty')) {
          $.getJSON(requestUrl, function(data) {
              var artist = data.recenttracks.track[0].artist["#text"];
              var song = data.recenttracks.track[0]["name"];
              var cover = data.recenttracks.track[0].image[3]["#text"];
              if (cover === "") {
                  cover = "http://img2-ak.lst.fm/i/u/174s/4128a6eb29f94943c9d206c08e625904.png";
              }
              var outhtml = '<div class="lf"><img class="lf__cover" src="' + cover + '"/><div class="lf__trackInfo"><span class="lf__artist">' + artist + '</span><span class="lf__song">' + song + '</span></div></div>';
              $('[data-lastfm] .tooltip').append(outhtml);
          });
      }
  }

  $(document).ready(function() {
      var bLazy = new Blazy({
        offset: 20,
        selector: '.blazy',
        loadInvisible: false,
        breakpoints: [{
          width: 360, // Max-width
          src: 'data-src-small'
        }],
        success: function(element) {
          $(element).parent().removeClass('loading', 500);
          updateCounter();
        },
        error: function(element, msg) {
          if (msg === 'missing') {
            $(element).parent().removeClass('loading', 500); // Data-src is missing
            console.error("bLazy: data-src is missing");
          } else if (msg === 'invalid') {
            $(element).parent().removeClass('loading', 500);
            // Data-src is invalid
            console.error("bLazy: data-src is invalid");
    
          }
        }
      });
      // not needed, only here to illustrate amount of loaded images
      var imageLoaded = 0;
    
      function updateCounter() {
        imageLoaded++;
        console.info("bLazy: Images loaded: %d", imageLoaded);
      }
    
      // tabs(bLazy);

    ////= member.js

    // http://arresteddeveloper.net/wordpress-infinite-scroll-with-wordpress-posts-and-waypoints-js/
    
    // Chyba z tego zrobić należy objekt
    
    var project_status = $('#finished_projects').attr('data-projects-status');
    var ajax_url = jQuery('#projects').attr('data-ajax-url');
    var total_finished_projects = jQuery('#finished_projects').attr('data-total-finished-projects');
    var total_in_progress_projects = jQuery('#in_progress_projects').attr('data-total-in-progress-projects');
    var total_ideas_projects = jQuery('#ideas_projects').attr('data-total-ideas-projects');
    var post_offset = 0;
    var loaded_finished_projects = 0;
    
    // Skrolujemy do stopki, wtedy uruchamia się funkcja loadProjects()
    if (ajax_url) {
      $(window).scroll(function() {
        if ($(window).scrollTop() >= $(document).height() - $(window).height() - 100) {
          if ($('#ideas_projects').is(':visible')) {
            loaded_ideas_projects = $('#ideas_projects').children().length;
            loadProjects('ideas', total_ideas_projects, loaded_ideas_projects);
          }
          else if ($('#in_progress_projects').is(':visible')) {
            loaded_in_progress_projects = $('#in_progress_projects').children().length;
            loadProjects('in_progress', total_in_progress_projects, loaded_in_progress_projects);
          }
          else if ($('#finished_projects').is(':visible')) {
            loaded_finished_projects = $('#finished_projects').children().length;
            loadProjects('finished', total_finished_projects, loaded_finished_projects);
          }
        }
      });
    }
    
    
    function loadProjects(projects_status, total_projects, loaded_projects) {
      post_offset = parseInt(post_offset) + 6;
      console.info("Loaded %s projects: %d/%d",projects_status, loaded_projects, total_projects);
    
      if (total_projects > loaded_projects) {
        $('.loader').show();
        $.ajax({
          url: ajax_url,
          type: 'POST',
          data: {
            action: 'load_projects',
            post_offset: post_offset,
            projects_status: projects_status,
          },
          success: function(data) {
            $('#' + projects_status + '_projects').append(data);
            // $(data).hide().appendTo('#' + projects_status + '_projects').show(200);
            console.info('Ajax: Loaded more %s projects', projects_status);
            bLazy.revalidate();
            cardExcerpt();
            $('.loader').hide();
          }
        });
      } else {
        return false;
      }
    }

    function initTopbar() {
        $('.topbarWrapper').scrollupbar({
            enterViewport: function() {
                $('.topbarWrapper').addClass('topbarWrapper--visible');
            },
            fullyEnterViewport: function() {
                $('#last-event').text('fullyEnterViewport');
            },
            exitViewport: function() {
                $('#last-event').text('exitViewport');
            },
            partiallyExitViewport: function() {
                $('#last-event').text('partiallyExitViewport');
            }
        });
    }
    initTopbar();
    
    if ($(window).width() < 750) {
        $.scrollupbar.destroy('.topbarWrapper');
    }
    
    $(window).scroll(function(event) {
        // didScroll = true;
        var st = $(this).scrollTop();
        // Gdy jesteśmy na samej górze, to pokazyjemy całe logo
        if (st === 0) {
            $('.topbarWrapper').removeClass('topbarWrapper--visible');
        }
    });

    var tabs = (function() {
        var currentTab;
        return {
            init: function() {
                // pobieramy href
                currentTab = $('.tabsMenu__item--current .link--tab').attr('href');
                // href jest jednocześnie id odpowiedniego tabu, który wyświetlamy
                $(currentTab).addClass('tab__content--visible');
                // ładujemy obrazki
                bLazy.load($(".blazy", currentTab), true);
                console.info('Tabs initiated:', currentTab);
            },
            reset: function() {
                // Z tym #tabsReset, to taki hack. Wykorzystywany dlatego, że
                // po kliknięciu chowają się wszystkie taby, oprócz tej z odpowiednim id
                currentTab = $('#tabsReset .link--tab').attr('href');
                $(currentTab).removeClass("tab__content--hidden").addClass("tab__content--visible");
                console.info('Tabs initiated:', currentTab);
            }
        };
    })();
    tabs.init();
    
    $(".global").on('click', '.link--tab', function(event) {
        // wyłącza domyślne przejście na adres linku
        event.preventDefault();
        // dodaje klasę do <li>
        $(this).parent().addClass("tabsMenu__item--current");
        // usuwa klasę z <li>
        $(this).parent().siblings().removeClass("tabsMenu__item--current");
        // pobieramy id z hrefu
        var tab = $(this).attr("href");
        // jeśli blok nie ma takiego id, to chowamy go
        $(".tab__content").not(tab).addClass("tab__content--hidden").removeClass("tab__content--visible");
        // a jeśli ma, to pokazujemy
        $(tab).removeClass("tab__content--hidden").addClass("tab__content--visible");
        // ładujemy obrazki w bloku z odpowiednim id
        bLazy.load($(".blazy", tab), true);
    });

    (function() {
        // https://marcin.laber.pl/2014/09/odmiana-liczebnikow-w-javascript/
        var num = function(value, numerals, wovalue) {
            var t0 = value % 10,
                t1 = value % 100,
                vo = [];
            if (wovalue !== true)
                vo.push(value);
            if (value === 1 && numerals[1])
                vo.push(numerals[1]);
            else if ((value === 0 || (t0 >= 0 && t0 <= 1) || (t0 >= 5 && t0 <= 9) || (t1 > 10 && t1 < 20)) && numerals[0])
                vo.push(numerals[0]);
            else if (((t1 < 10 || t1 > 20) && t0 >= 2 && t0 <= 4) && numerals[2])
                vo.push(numerals[2]);
            return vo[1];
        };
    
        $('.counter').each(function(index) {
            var status = $(this).attr('id');
            var count = parseInt($(this).children('a').html());
            console.log(count, status);
            if (status === 'finished') {
                $(this).find('.counter__label').html(num(count, ["Projektów ukończonych", "Projekt ukończony", "Projekty ukończone"]));
            } else {
                $(this).find('.counter__label').html(num(count, ["Projektów realizowanych", "Projekt realizowany", "Projekty realizowane"]));
            }
        });
    
    })();

  });

  // Prezes zawsze na pierwszym miejscu //
  $('.membercard#president').insertBefore('#current_members .cardsWrapper div:eq(0)');

  // Dodaje do <a> klasę "link"
  $('.project__content a').addClass('link');

});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlcyI6WyJtYWluLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIG1haW4uanMgLy9cbi8vIFdzenlzdGtvIHdyenVjYW15IHR1XG5cbihmdW5jdGlvbigkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgX2Rlc3Ryb3lGbjtcblxuICAkLnNjcm9sbHVwYmFyID0gZnVuY3Rpb24oJGJhciwgb3B0aW9ucykge1xuICAgIC8vIERlZmF1bHQgb3B0aW9uc1xuICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh7XG4gICAgICBlbnRlclZpZXdwb3J0OiAkLm5vb3AsXG4gICAgICBmdWxseUVudGVyVmlld3BvcnQ6ICQubm9vcCxcbiAgICAgIGV4aXRWaWV3cG9ydDogJC5ub29wLFxuICAgICAgcGFydGlhbGx5RXhpdFZpZXdwb3J0OiAkLm5vb3BcbiAgICB9LCBvcHRpb25zKTtcblxuICAgIGZ1bmN0aW9uIGlzRnVsbHlJblZpZXdwb3J0KCkge1xuICAgICAgcmV0dXJuICR3aW5kb3cuc2Nyb2xsVG9wKCkgPD0gJGJhci5vZmZzZXQoKS50b3A7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNJblZpZXdwb3J0KCkge1xuICAgICAgcmV0dXJuICR3aW5kb3cuc2Nyb2xsVG9wKCkgPCAkYmFyLm9mZnNldCgpLnRvcCArICRiYXIub3V0ZXJIZWlnaHQoKTtcbiAgICB9XG5cbiAgICB2YXIgJHdpbmRvdyA9ICQod2luZG93KSxcbiAgICAgICAgJGRvY3VtZW50ID0gJChkb2N1bWVudCksXG4gICAgICAgIG1pblkgPSAkYmFyLmNzcygncG9zaXRpb24nKSA9PSAnZml4ZWQnID8gMCA6ICRiYXIub2Zmc2V0KCkudG9wLFxuICAgICAgICBsYXN0WSA9ICR3aW5kb3cuc2Nyb2xsVG9wKCksIC8vIFVzZSBsYXN0IFkgdG8gZGV0ZWN0IHNjcm9sbCBkaXJlY3Rpb24uXG4gICAgICAgIGluaXRpYWxQb3NUb3AgPSAkYmFyLnBvc2l0aW9uKCkudG9wLFxuICAgICAgICBpT1MgPSAvKGlQYWR8aVBob25lfGlQb2QpL2cudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSxcbiAgICAgICAgdGltZW91dDtcblxuICAgICQuc2Nyb2xsdXBiYXIuaXNJblZpZXdwb3J0ID0gaXNJblZpZXdwb3J0KCk7XG4gICAgJC5zY3JvbGx1cGJhci5pc0Z1bGx5SW5WaWV3cG9ydCA9IGlzRnVsbHlJblZpZXdwb3J0KCk7XG5cbiAgICAvLyBpT1MgY2FuJ3QgaGFuZGxlIG1vbWVudHVtIHNjcm9sbCBwcm9wZXJseSAoU2VlIGRpc2N1c3Npb24gb25cbiAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzI4NjM1NDcpLlxuICAgIGlmICghaU9TKSB7XG4gICAgICAkd2luZG93Lm9uKCdzY3JvbGwuc2Nyb2xsdXBiYXInLCBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHkgPSAkd2luZG93LnNjcm9sbFRvcCgpLFxuICAgICAgICAgICAgYmFySGVpZ2h0ID0gJGJhci5vdXRlckhlaWdodCgpO1xuXG4gICAgICAgIC8vIElnbm9yZSBlbGFzdGljIHNjcm9sbGluZy5cbiAgICAgICAgaWYgKHkgPCAwIHx8IHkgPiAoJGRvY3VtZW50LmhlaWdodCgpIC0gJHdpbmRvdy5oZWlnaHQoKSkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDYW5jZWwgdGhlIGV2ZW50IGZpcmVkIGJ5IHRoZSBwcmV2aW91cyBzY3JvbGwuXG4gICAgICAgIGlmICh0aW1lb3V0KSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHkgPCBsYXN0WSkgeyAvLyBTY3JvbGxpbmcgdXBcbiAgICAgICAgICAvLyBJZiB0aGUgYmFyIGlzIGhpZGRlbiwgcGxhY2UgaXQgcmlnaHQgYWJvdmUgdGhlIHRvcCBmcmFtZS5cbiAgICAgICAgICBpZiAoISQuc2Nyb2xsdXBiYXIuaXNJblZpZXdwb3J0ICYmIGxhc3RZIC0gYmFySGVpZ2h0ID49IG1pblkpIHtcbiAgICAgICAgICAgICRiYXIuY3NzKCd0b3AnLCBsYXN0WSAtIGJhckhlaWdodCk7XG4gICAgICAgICAgICAkLnNjcm9sbHVwYmFyLmlzSW5WaWV3cG9ydCA9IHRydWU7XG4gICAgICAgICAgICBvcHRpb25zLmVudGVyVmlld3BvcnQoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBTY3JvbGxzIHVwIGJpZ2dlciB0aGFuIHRoZSBiYXIncyBoZWlnaHQgZml4ZXMgdGhlIGJhciBvbiB0b3AuXG4gICAgICAgICAgaWYgKGlzRnVsbHlJblZpZXdwb3J0KCkpIHtcbiAgICAgICAgICAgIGlmICh5ID49IG1pblkpIHtcbiAgICAgICAgICAgICAgJGJhci5jc3Moe1xuICAgICAgICAgICAgICAgICdwb3NpdGlvbic6ICdmaXhlZCcsXG4gICAgICAgICAgICAgICAgJ3RvcCc6IDBcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAkYmFyLmNzcyh7XG4gICAgICAgICAgICAgICAgJ3Bvc2l0aW9uJzogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgICAgICAndG9wJzogaW5pdGlhbFBvc1RvcFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCEkLnNjcm9sbHVwYmFyLmlzRnVsbHlJblZpZXdwb3J0KSB7XG4gICAgICAgICAgICAgICQuc2Nyb2xsdXBiYXIuaXNGdWxseUluVmlld3BvcnQgPSB0cnVlO1xuICAgICAgICAgICAgICBvcHRpb25zLmZ1bGx5RW50ZXJWaWV3cG9ydCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIEZpcmUgYW4gZXZlbnQgdG8gcmV2ZWFsIHRoZSBlbnRpcmUgYmFyIGFmdGVyIDQwMG1zIGlmIHRoZSBzY3JvbGxcbiAgICAgICAgICAvLyB3YXNuJ3QgYmlnIGVub3VnaC5cbiAgICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICghaXNGdWxseUluVmlld3BvcnQoKSkge1xuICAgICAgICAgICAgICAkYmFyLmNzcyh7XG4gICAgICAgICAgICAgICAgJ3Bvc2l0aW9uJzogJ2ZpeGVkJyxcbiAgICAgICAgICAgICAgICAndG9wJzogJGJhci5vZmZzZXQoKS50b3AgLSB5XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICRiYXIuYW5pbWF0ZSh7J3RvcCc6IDB9LCAxMDAsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICQuc2Nyb2xsdXBiYXIuaXNGdWxseUluVmlld3BvcnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuZnVsbHlFbnRlclZpZXdwb3J0KCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIDQwMCk7XG4gICAgICAgIH0gZWxzZSBpZiAoeSA+IGxhc3RZKSB7IC8vIFNjcm9sbGluZyBkb3duXG4gICAgICAgICAgLy8gVW5maXggdGhlIGJhciBhbGxvd2luZyBpdCB0byBzY3JvbGwgd2l0aCB0aGUgcGFnZS5cbiAgICAgICAgICBpZiAoJC5zY3JvbGx1cGJhci5pc0Z1bGx5SW5WaWV3cG9ydCkge1xuICAgICAgICAgICAgJGJhci5jc3Moe1xuICAgICAgICAgICAgICAncG9zaXRpb24nOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgICAndG9wJzogbGFzdFkgPiBtaW5ZID8gbGFzdFkgOiBpbml0aWFsUG9zVG9wXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKCFpc0Z1bGx5SW5WaWV3cG9ydCgpKSB7XG4gICAgICAgICAgICAgICQuc2Nyb2xsdXBiYXIuaXNGdWxseUluVmlld3BvcnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgb3B0aW9ucy5wYXJ0aWFsbHlFeGl0Vmlld3BvcnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoJC5zY3JvbGx1cGJhci5pc0luVmlld3BvcnQgJiYgIWlzSW5WaWV3cG9ydCgpKSB7XG4gICAgICAgICAgICAkLnNjcm9sbHVwYmFyLmlzSW5WaWV3cG9ydCA9IGZhbHNlO1xuICAgICAgICAgICAgb3B0aW9ucy5leGl0Vmlld3BvcnQoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBGaXJlIGFuIGV2ZW50IHRvIGhpZGUgdGhlIGVudGlyZSBiYXIgYWZ0ZXIgNDAwbXMgaWYgdGhlIHNjcm9sbFxuICAgICAgICAgIC8vIHdhc24ndCBiaWcgZW5vdWdoLlxuICAgICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKGlzSW5WaWV3cG9ydCgpICYmIHkgLSBiYXJIZWlnaHQgPj0gbWluWSkge1xuICAgICAgICAgICAgICAkYmFyLmFuaW1hdGUoeyd0b3AnOiB5IC0gYmFySGVpZ2h0fSwgMTAwLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAkLnNjcm9sbHVwYmFyLmlzSW5WaWV3cG9ydCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuZXhpdFZpZXdwb3J0KCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIDQwMCk7XG4gICAgICAgIH1cblxuICAgICAgICBsYXN0WSA9IHk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgeyAvLyBGYWxsYmFjayBzaW1wbGlmaWVkIGJlaGF2aW91ciBmb3IgaU9TLlxuICAgICAgJHdpbmRvdy5vbigndG91Y2hzdGFydC5zY3JvbGx1cGJhcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbGFzdFkgPSAkd2luZG93LnNjcm9sbFRvcCgpO1xuICAgICAgfSk7XG5cbiAgICAgICR3aW5kb3cub24oJ3RvdWNoZW5kLnNjcm9sbHVwYmFyJywgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgeSA9ICR3aW5kb3cuc2Nyb2xsVG9wKCk7XG5cbiAgICAgICAgaWYgKHkgPCBsYXN0WSB8fCB5IC0gJGJhci5vdXRlckhlaWdodCgpIDwgbWluWSkgeyAvLyBTY3JvbGxpbmcgdXBcbiAgICAgICAgICBpZiAoeSA8PSBtaW5ZKSB7XG4gICAgICAgICAgICAvLyBSZXN0b3JlIG9yaWdpbmFsIHBvc2l0aW9uLlxuICAgICAgICAgICAgJGJhci5jc3Moe1xuICAgICAgICAgICAgICAncG9zaXRpb24nOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgICAndG9wJzogaW5pdGlhbFBvc1RvcFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICRiYXIuc2hvdyhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgJC5zY3JvbGx1cGJhci5pc0luVmlld3BvcnQgPSB0cnVlO1xuICAgICAgICAgICAgICAkLnNjcm9sbHVwYmFyLmlzRnVsbHlJblZpZXdwb3J0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgb3B0aW9ucy5lbnRlclZpZXdwb3J0KCk7XG4gICAgICAgICAgICAgIG9wdGlvbnMuZnVsbHlFbnRlclZpZXdwb3J0KCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJGJhci5jc3Moe1xuICAgICAgICAgICAgICAncG9zaXRpb24nOiAnZml4ZWQnLFxuICAgICAgICAgICAgICAndG9wJzogMFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICQuc2Nyb2xsdXBiYXIuaXNJblZpZXdwb3J0ID0gdHJ1ZTtcbiAgICAgICAgICAgIG9wdGlvbnMuZW50ZXJWaWV3cG9ydCgpO1xuXG4gICAgICAgICAgICAkYmFyLnNsaWRlRG93bihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgJC5zY3JvbGx1cGJhci5pc0Z1bGx5SW5WaWV3cG9ydCA9IHRydWU7XG4gICAgICAgICAgICAgIG9wdGlvbnMuZnVsbHlFbnRlclZpZXdwb3J0KCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoeSA+IGxhc3RZKSB7IC8vIFNjcm9sbGluZyBkb3duXG4gICAgICAgICAgJC5zY3JvbGx1cGJhci5pc0Z1bGx5SW5WaWV3cG9ydCA9IGZhbHNlO1xuICAgICAgICAgIG9wdGlvbnMucGFydGlhbGx5RXhpdFZpZXdwb3J0KCk7XG5cbiAgICAgICAgICAkYmFyLnNsaWRlVXAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkLnNjcm9sbHVwYmFyLmlzSW5WaWV3cG9ydCA9IGZhbHNlO1xuICAgICAgICAgICAgb3B0aW9ucy5leGl0Vmlld3BvcnQoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxhc3RZID0geTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIF9kZXN0cm95Rm4gPSBmdW5jdGlvbigpIHtcbiAgICAgIC8vIFVuYmluZCBhbGwgbGlzdGVuZXJzIGFkZGVkIGJ5IHNjcm9sbHVwYmFyIHBsdWdpblxuICAgICAgJHdpbmRvdy5vZmYoJy5zY3JvbGx1cGJhcicpO1xuXG4gICAgICAvLyBSZXN0b3JlIG9yaWdpbmFsIGJhciBwb3NpdGlvbi5cbiAgICAgICRiYXIuY3NzKHtcbiAgICAgICAgJ3Bvc2l0aW9uJzogJ2Fic29sdXRlJyxcbiAgICAgICAgJ3RvcCc6IGluaXRpYWxQb3NUb3BcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICByZXR1cm4gJGJhcjtcbiAgfTtcblxuICAkLnNjcm9sbHVwYmFyLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoX2Rlc3Ryb3lGbikge1xuICAgICAgcmV0dXJuIF9kZXN0cm95Rm4oKTtcbiAgICB9XG4gIH07XG5cbiAgJC5mbi5zY3JvbGx1cGJhciA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gJC5zY3JvbGx1cGJhcih0aGlzLCBvcHRpb25zKTtcbiAgfTtcbn0pKGpRdWVyeSk7XG5cbmpRdWVyeShmdW5jdGlvbigkKSB7XG5cbiAgLyoqXG4gICAqIERyb3B5XG4gICAqIGh0dHA6Ly9jb2RlcGVuLmlvL1RvbWJlay9wZW4vT1B2cExlXG4gICAqL1xuICB2YXIgZHJvcHkgPSB7XG4gICAgJGRyb3B5czogbnVsbCxcbiAgICBvcGVuQ2xhc3M6ICdvcGVuJyxcbiAgICBzZWxlY3RDbGFzczogJ3NlbGVjdGVkJyxcbiAgICBpbml0OiBmdW5jdGlvbigpe1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICBcbiAgICAgIHNlbGYuJGRyb3B5cyA9ICQoJy5kcm9weScpO1xuICAgICAgc2VsZi5ldmVudEhhbmRsZXIoKTtcbiAgICB9LFxuICAgIGV2ZW50SGFuZGxlcjogZnVuY3Rpb24oKXtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgXG4gICAgICAvLyBPcGVuaW5nIGEgZHJvcHlcbiAgICAgIHNlbGYuJGRyb3B5cy5maW5kKCcuZHJvcHlfX3RpdGxlJykuY2xpY2soZnVuY3Rpb24oKXtcbiAgICAgICAgc2VsZi4kZHJvcHlzLnJlbW92ZUNsYXNzKHNlbGYub3BlbkNsYXNzKTtcbiAgICAgICAgJCh0aGlzKS5wYXJlbnRzKCcuZHJvcHknKS5hZGRDbGFzcyhzZWxmLm9wZW5DbGFzcyk7XG4gICAgICB9KTtcbiAgXG4gICAgICAvLyBDbGljayBvbiBhIGRyb3B5IGxpc3RcbiAgICAgIHNlbGYuJGRyb3B5cy5maW5kKCcuZHJvcHlfX2NvbnRlbnQgdWwgbGkgYScpLmNsaWNrKGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciAkdGhhdCA9ICQodGhpcyk7XG4gICAgICAgIHZhciAkZHJvcHkgPSAkdGhhdC5wYXJlbnRzKCcuZHJvcHknKTtcbiAgICAgICAgdmFyICRpbnB1dCA9ICRkcm9weS5maW5kKCdpbnB1dCcpO1xuICAgICAgICB2YXIgJHRpdGxlID0gJCh0aGlzKS5wYXJlbnRzKCcuZHJvcHknKS5maW5kKCcuZHJvcHlfX3RpdGxlIHNwYW4nKTtcbiAgXG4gICAgICAgIC8vIFJlbW92ZSBzZWxlY3RlZCBjbGFzc1xuICAgICAgICAkZHJvcHkuZmluZCgnLmRyb3B5X19jb250ZW50IGEnKS5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcyhzZWxmLnNlbGVjdENsYXNzKTtcbiAgICAgICAgfSk7XG4gIFxuICAgICAgICAvLyBVcGRhdGUgc2VsZWN0ZWQgdmFsdWVcbiAgICAgICAgJHRpdGxlLmh0bWwoJHRoYXQuaHRtbCgpKTtcbiAgICAgICAgJGlucHV0LnZhbCgkdGhhdC5hdHRyKCdkYXRhLXZhbHVlJykpLnRyaWdnZXIoJ2NoYW5nZScpO1xuICBcbiAgICAgICAgLy8gSWYgYmFjayB0byBkZWZhdWx0LCByZW1vdmUgc2VsZWN0ZWQgY2xhc3MgZWxzZSBhZGRjbGFzcyBvbiByaWdodCBlbGVtZW50XG4gICAgICAgIGlmKCR0aGF0Lmhhc0NsYXNzKCdkcm9weV9faGVhZGVyJykpe1xuICAgICAgICAgICR0aXRsZS5yZW1vdmVDbGFzcyhzZWxmLnNlbGVjdENsYXNzKTtcbiAgICAgICAgICAkdGl0bGUuaHRtbCgkdGl0bGUuYXR0cignZGF0YS10aXRsZScpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNle1xuICAgICAgICAgICR0aXRsZS5hZGRDbGFzcyhzZWxmLnNlbGVjdENsYXNzKTtcbiAgICAgICAgICAkdGhhdC5hZGRDbGFzcyhzZWxmLnNlbGVjdENsYXNzKTtcbiAgICAgICAgfVxuICBcbiAgICAgICAgLy8gQ2xvc2UgZHJvcGRvd25cbiAgICAgICAgJGRyb3B5LnJlbW92ZUNsYXNzKHNlbGYub3BlbkNsYXNzKTtcbiAgICAgIH0pO1xuICBcbiAgICAgIC8vIENsb3NlIGFsbCBkcm9wZG93biBvbmNsaWNrIG9uIGFub3RoZXIgZWxlbWVudFxuICAgICAgJChkb2N1bWVudCkuYmluZCgnY2xpY2snLCBmdW5jdGlvbihlKXtcbiAgICAgICAgICBpZiAoISAkKGUudGFyZ2V0KS5wYXJlbnRzKCkuaGFzQ2xhc3MoJ2Ryb3B5JykpeyBzZWxmLiRkcm9weXMucmVtb3ZlQ2xhc3Moc2VsZi5vcGVuQ2xhc3MpOyB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG4gIFxuICAkKGZ1bmN0aW9uKCl7XG4gICAgZHJvcHkuaW5pdCgpO1xuICB9KTtcblxuICAgIGZ1bmN0aW9uIGFjdHMoKSB7XG4gICAgICB2YXIgdGU7XG4gICAgICB2YXIgbWluID0gJCgnLnBvc3QtbGlzdC1pdGVtLWNvbnRlbnQgaDInKS5oZWlnaHQoKTtcbiAgICAgICQoJy5wb3N0LWxpc3QtaXRlbSAucG9zdC1saXN0LWl0ZW0tY29udGVudCBoMicpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICgkKHRoaXMpLmhlaWdodCgpIDwgbWluKVxuICAgICAgICAgIG1pbiA9ICQodGhpcykuaGVpZ2h0KCk7XG4gICAgICB9KTtcbiAgXG4gICAgICAkKCcucG9zdC1saXN0LWl0ZW0tY29udGVudCBoMicpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICgkKHRoaXMpLmhlaWdodCgpID09IG1pbikge1xuICAgICAgICAgIHRlID0gJCh0aGlzKS5wYXJlbnQoKS5wYXJlbnQoKS5jaGlsZHJlbignLmV4Y2VycHQnKTtcbiAgICAgICAgICAkKHRlKS50ZXh0KGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50VGV4dCkge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRUZXh0LnN1YnN0cihjdXJyZW50VGV4dC5sZW5ndGggLSAzKSAhPSAnXFx1MjAyNicpXG4gICAgICAgICAgICAgIHJldHVybiBjdXJyZW50VGV4dC5zdWJzdHIoMCwgMTUwKSArICdcXHUyMDI2JztcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmICgoJCh0aGlzKS5oZWlnaHQoKSA8IChtaW4gLSAxKSAqIDMpICYmICgkKHRoaXMpLmhlaWdodCgpID4gbWluKSkge1xuICAgICAgICAgIHRlID0gJCh0aGlzKS5wYXJlbnQoKS5wYXJlbnQoKS5jaGlsZHJlbignLmV4Y2VycHQnKTtcbiAgICAgICAgICAkKHRlKS50ZXh0KGZ1bmN0aW9uKGluZGV4LCBjdXJyZW50VGV4dCkge1xuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRUZXh0LnN1YnN0cigwLCA4MCkgKyAnXFx1MjAyNic7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGUgPSAkKHRoaXMpLnBhcmVudCgpLnBhcmVudCgpLmNoaWxkcmVuKCcuZXhjZXJwdCcpO1xuICAgICAgICAgICQodGhpcykudGV4dChmdW5jdGlvbihpbmRleCwgY3VycmVudFRleHQpIHtcbiAgICAgICAgICAgIGlmICgoY3VycmVudFRleHQuc3Vic3RyKGN1cnJlbnRUZXh0Lmxlbmd0aCAtIDMpICE9ICdcXHUyMDI2JykgJiYgKGN1cnJlbnRUZXh0Lmxlbmd0aCA+IDEyMCkpXG4gICAgICAgICAgICAgIHJldHVybiBjdXJyZW50VGV4dC5zdWJzdHIoMCwgMTIwKSArICdcXHUyMDI2JztcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0ZS5jc3MoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGFjdHMoKTtcbiAgICAkKHdpbmRvdykucmVzaXplKGFjdHMpO1xuICBcbiAgICAgZnVuY3Rpb24gY2FyZEV4Y2VycHQoKSB7XG4gICAgICAkKFwiLmNhcmRfX2V4Y2VycHRcIikudGV4dChmdW5jdGlvbihpbmRleCwgY3VycmVudFRleHQpIHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRUZXh0LnN1YnN0cigwLCAxNDApICsgJ1xcdTIwMjYnO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGNhcmRFeGNlcnB0KCk7XG5cbiAgLy8gUGFrdWplIG1uaWVqc3plIG9icmF6a2kgYmV6IHBvZHBpc3UgdyA8ZmlndXJlPiAvL1xuICAvLyBKZcWbbGkgb2JyYXplayBtYSB0eXR1xYIsIHR5bSBzacSZIHpham11amUgcGhwIGZ1bmtjamEgdyBwcm9qZWN0LWZ1bmN0aW9ucy5waHBcbiAgJCgnLnByb2plY3RfX2NvbnRlbnQgcCcpLmVhY2goZnVuY3Rpb24oaW5kZXgpIHtcbiAgICB2YXIgc29tZV9pbWcgPSAkKHRoaXMpLmZpbmQoJ2ltZycpO1xuICAgIHZhciB3aWR0aCA9IHNvbWVfaW1nLndpZHRoKCk7XG4gICAgaWYgKHdpZHRoIDwgOTgwKSB7XG4gICAgICBzb21lX2ltZy53cmFwKFwiPGZpZ3VyZT48L2ZpZ3VyZT5cIik7XG4gICAgfVxuICB9KTtcblxuICAvL1NrcmFjYSBpbWlvbmEsIGJ5IG5pZSB3eWNob2R6acWCeSB6YSBibG9raVxuICAkKCcubWVtYmVyY2FyZF9fbmFtZSBhJykuZWFjaChmdW5jdGlvbihpbmRleCkge1xuICAgIHZhciBsZW5ndGggPSAkKHRoaXMpLmh0bWwoKS5sZW5ndGg7XG4gICAgaWYgKGxlbmd0aCA+IDE3KSB7XG4gICAgICB2YXIgbmFtZSA9ICQodGhpcykudGV4dCgpO1xuICAgICAgJCh0aGlzKS5wYXJlbnQoKS5hZGRDbGFzcygnbWVtYmVyY2FyZF9fbmFtZS0tdG9vTG9uZycpO1xuICAgICAgLy8gY29uc29sZS5sb2cobmFtZSk7XG4gICAgICB2YXIgdHJpbW1lZF9uYW1lID0gbmFtZS5jaGFyQXQoMCkgKyBcIi4gXCIgKyBuYW1lLnN1YnN0cihuYW1lLmluZGV4T2YoJyAnKSArIDEpO1xuICAgICAgLy8gY29uc29sZS5sb2codHJpbW1lZF9uYW1lKTtcbiAgICAgICQodGhpcykudGV4dCh0cmltbWVkX25hbWUpO1xuICAgIH1cbiAgfSk7XG4gIFxuICAkKCcubWVtYmVyY2FyZFNtYWxsX19uYW1lIGEnKS5lYWNoKGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgdmFyIGxlbmd0aCA9ICQodGhpcykuaHRtbCgpLmxlbmd0aDtcbiAgICBpZiAobGVuZ3RoID4gMTQpIHtcbiAgICAgIHZhciBuYW1lID0gJCh0aGlzKS50ZXh0KCk7XG4gICAgICAvLyBjb25zb2xlLmxvZyhuYW1lKTtcbiAgICAgIHZhciB0cmltbWVkX25hbWUgPSBuYW1lLmNoYXJBdCgwKSArIFwiLiBcIiArIG5hbWUuc3Vic3RyKG5hbWUuaW5kZXhPZignICcpICsgMSk7XG4gICAgICAvLyBjb25zb2xlLmxvZyh0cmltbWVkX25hbWUpO1xuICAgICAgJCh0aGlzKS50ZXh0KHRyaW1tZWRfbmFtZSk7XG4gICAgfVxuICB9KTtcblxuICAvLyBOb3R5ZmlrYWNqZSwgcG93aWFkb21pZW5pYSAvL1xuICAkKFwiLm5vdGUtY2xvc2VcIikuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgJCh0aGlzKS5wYXJlbnQoKVxuICAgICAgLmFuaW1hdGUoe1xuICAgICAgICBvcGFjaXR5OiAwXG4gICAgICB9LCAyNTAsIGZ1bmN0aW9uKCkge1xuICAgICAgICAkKHRoaXMpXG4gICAgICAgICAgLmFuaW1hdGUoe1xuICAgICAgICAgICAgbWFyZ2luQm90dG9tOiAwXG4gICAgICAgICAgfSwgMjUwKVxuICAgICAgICAgIC5jaGlsZHJlbigpXG4gICAgICAgICAgLmFuaW1hdGUoe1xuICAgICAgICAgICAgcGFkZGluZzogMFxuICAgICAgICAgIH0sIDI1MClcbiAgICAgICAgICAud3JhcElubmVyKFwiPGRpdiAvPlwiKVxuICAgICAgICAgIC5jaGlsZHJlbigpXG4gICAgICAgICAgLnNsaWRlVXAoMjUwLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICQodGhpcykuY2xvc2VzdChcIi5ub3RlXCIpLnJlbW92ZSgpO1xuICAgICAgICAgIH0pO1xuICAgICAgfSk7XG4gIH0pO1xuXG4gIC8vIEFuaW1hY2plIGRsYSBiYW5lcmEgcmVrcnV0YWNqaSAvL1xuICAkKCdsYWJlbC5idXR0b24nKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAkKCcuZmInKS5hZGRDbGFzcygnYW5pbWF0ZWQgZmFkZUluVXAnKTtcbiAgICAkKCcuZGF0ZSAuaWNvbi1jb250YWluZXInKS5hZGRDbGFzcygnYW5pbWF0ZWQgc2xpZGVJbkxlZnQnKTtcbiAgICAkKCcuZGF0ZSBzcGFuJykuYWRkQ2xhc3MoJ2FuaW1hdGVkIHNsaWRlSW5MZWZ0Jyk7XG4gICAgJCgnLmxvY2F0aW9uIC5pY29uLWNvbnRhaW5lcicpLmFkZENsYXNzKCdhbmltYXRlZCBzbGlkZUluUmlnaHQnKTtcbiAgICAkKCcubG9jYXRpb24gc3BhbicpLmFkZENsYXNzKCdhbmltYXRlZCBzbGlkZUluUmlnaHQnKTtcbiAgXG4gIH0pO1xuICAkKCcjY2xvc2VfYmFubmVyJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgJCgnLmZiJykucmVtb3ZlQ2xhc3MoJ2FuaW1hdGVkIGZhZGVJblVwJyk7XG4gICAgJCgnLmRhdGUgLmljb24tY29udGFpbmVyJykucmVtb3ZlQ2xhc3MoJ2FuaW1hdGVkIHNsaWRlSW5MZWZ0Jyk7XG4gICAgJCgnLmRhdGUgc3BhbicpLnJlbW92ZUNsYXNzKCdhbmltYXRlZCBzbGlkZUluTGVmdCcpO1xuICAgICQoJy5sb2NhdGlvbiAuaWNvbi1jb250YWluZXInKS5yZW1vdmVDbGFzcygnYW5pbWF0ZWQgc2xpZGVJblJpZ2h0Jyk7XG4gICAgJCgnLmxvY2F0aW9uIHNwYW4nKS5yZW1vdmVDbGFzcygnYW5pbWF0ZWQgc2xpZGVJblJpZ2h0Jyk7XG4gIH0pO1xuICBcbiAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8yNDA3MDYyNy9jcmVhdGUtZHJvcGRvd24tYmFubmVyLXdoZW4tdXNlci1maXJzdC12aXNpdHMtd2Vic2l0ZVxuICAvLyBQb3p3YWxhasSFIG90d2llcmHEhyBiYW5lciB0eWxrbyBwcnp5IHBpZXJ3c3plaiB3aXp5Y2llXG4gIFxuICAvLyBjb29raWUtanNcblxuICAvLy8vID0gcGFydGlhbHMvc2hvdy1uaWNrbmFtZXMuanNcblxuICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpe1xuICAgICAgLy8gJChcIiNuYXYtbW9iaWxlXCIpLmh0bWwoJChcIiNuYXYtbWFpblwiKS5odG1sKCkpO1xuICAgICAgJChcIiNuYXYtdHJpZ2dlciAubmF2aWNvbi1idXR0b25cIikuY2xpY2soZnVuY3Rpb24oKXtcbiAgICAgICAgY29uc29sZS5pbmZvKCdCdXJnZXIgY2xpY2tlZCcpO1xuICAgICAgICAgIGlmICgkKFwiI25hdiB1bFwiKS5oYXNDbGFzcyhcIm5hdl9fbWVudS0tZXhwYW5kZWRcIikpIHtcbiAgICAgICAgICAgICAgJChcIiNuYXYgdWxcIikucmVtb3ZlQ2xhc3MoXCJuYXZfX21lbnUtLWV4cGFuZGVkXCIpLnNsaWRlVXAoMjUwKTtcbiAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcyhcIm9wZW5cIik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgJChcIiNuYXYgdWxcIikuYWRkQ2xhc3MoXCJuYXZfX21lbnUtLWV4cGFuZGVkXCIpLnNsaWRlRG93bigyNTApO1xuICAgICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKFwib3BlblwiKTtcbiAgICAgICAgICB9XG4gICAgICB9KTtcbiAgfSk7XG5cbiAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XG4gICAgU2xpZGVyID0gJCgnI3NsaWRlcicpLlN3aXBlKHtcbiAgICAgIGF1dG86IDAsXG4gICAgICBjb250aW51b3VzOiB0cnVlLFxuICAgIH0pLmRhdGEoJ1N3aXBlJyk7XG4gICAgaWYgKFNsaWRlcikge1xuICAgICAgJCgnLm5leHQnKS5vbignY2xpY2snLCBTbGlkZXIubmV4dCk7XG4gICAgICAkKCcucHJldicpLm9uKCdjbGljaycsIFNsaWRlci5wcmV2KTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIHByemV6IHRvIGdud28gbmllIGR6aWHFgmEgLm9uKClcbiAgLy8vLz0gcGFydGlhbHMvc21vb3RoLXNjcm9sbGluZy5qc1xuXG4gIFxuXG4gIChmdW5jdGlvbigpIHtcbiAgICAgIC8vIMW7ZWJ5IHRvb2x0aXAgbmllIGtsaWthxYJcbiAgICAgICQoJy50b29sdGlwJykub24oJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH0pO1xuICBcbiAgICAgICQoJ1tkYXRhLWdpdGh1Yl0nKS5ob3ZlcihmdW5jdGlvbihlKSB7XG4gICAgICAgICAgbG9hZEdpdGh1YigpO1xuICAgICAgICAgICQodGhpcykuY2hpbGRyZW4oJy50b29sdGlwJykuYWRkQ2xhc3MoJ3Rvb2x0aXAtLWFjdGl2ZScpO1xuICAgICAgfSwgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICQodGhpcykuY2hpbGRyZW4oJy50b29sdGlwJykucmVtb3ZlQ2xhc3MoJ3Rvb2x0aXAtLWFjdGl2ZScpO1xuICAgICAgfSk7XG4gIFxuICAgICAgJCgnW2RhdGEtbGFzdGZtXScpLmhvdmVyKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICBsb2FkTGFzdGZtKCk7XG4gICAgICAgICAgJCh0aGlzKS5jaGlsZHJlbignLnRvb2x0aXAnKS5hZGRDbGFzcygndG9vbHRpcC0tYWN0aXZlJyk7XG4gICAgICB9LCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgJCh0aGlzKS5jaGlsZHJlbignLnRvb2x0aXAnKS5yZW1vdmVDbGFzcygndG9vbHRpcC0tYWN0aXZlJyk7XG4gICAgICB9KTtcbiAgfSkoKTtcblxuICBmdW5jdGlvbiBsb2FkR2l0aHViKCkge1xuICAgICAgLy8gUG9iaWVyYSB1cmwgeiBocmVmYVxuICAgICAgdmFyIHByb2ZpbGVVcmwgPSAkKCdhW2RhdGEtZ2l0aHViXScpLmF0dHIoJ2hyZWYnKTtcbiAgICAgIC8vIE9kcG93aWVkbmlvIG9iY2luYSBnbyBkbyB1c2VybmFtZVxuICAgICAgdmFyIHVzZXJuYW1lID0gcHJvZmlsZVVybC5zdWJzdHIoMTkpO1xuICAgICAgLy8gRG9kYWplIHVzZXJuYW1lIGRvIHVybCB6YXB5dGFuaWFcbiAgICAgIHZhciByZXF1cmkgPSAnaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS91c2Vycy8nICsgdXNlcm5hbWU7XG4gICAgICAvLyBTcHJhd2R6YSwgY3p5IHRvb2x0aXAgcHVzdHksIGJ5IG5pZSBnZW5lcm93YcSHIG5vd3ljaCB6YXB5dGHFhFxuICAgICAgLy8gaSBuaWUgZG9kYXdhxIcgcG8gcmF6IGtvbGVqbnkgZGFuZSBkbyB0b29sdGlwYVxuICAgICAgaWYgKCQoJ1tkYXRhLWdpdGh1Yl0gLnRvb2x0aXAnKS5pcygnOmVtcHR5JykpIHtcbiAgICAgICAgICByZXF1ZXN0SlNPTihyZXF1cmksIGZ1bmN0aW9uKGpzb24pIHtcbiAgICAgICAgICAgICAgaWYgKGpzb24ubWVzc2FnZSA9PT0gXCJOaWUgem5hbGV6aW9ub1wiIHx8IHVzZXJuYW1lID09PSAnJykge1xuICAgICAgICAgICAgICAgICAgJCgnW2RhdGEtZ2l0aHViXSAudG9vbHRpcCcpLmh0bWwoXCI8aDI+QnJhayBpbmZvcm1hY2ppPC9oMj5cIik7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICB1c2VybmFtZSA9IGpzb24ubG9naW47XG4gICAgICAgICAgICAgICAgICB2YXIgcHJvZmlsZXVybCA9IGpzb24uaHRtbF91cmw7XG4gICAgICAgICAgICAgICAgICB2YXIgcmVwb3NudW0gPSBqc29uLnB1YmxpY19yZXBvcztcbiAgICAgICAgICAgICAgICAgIHZhciBhdml1cmwgPSBqc29uLmF2YXRhcl91cmw7XG4gIFxuICBcbiAgICAgICAgICAgICAgICAgIHZhciBvdXRodG1sID0gJzxkaXYgY2xhc3M9XCJnaFwiPicgK1xuICAgICAgICAgICAgICAgICAgICAgICc8aDQgY2xhc3M9XCJnaF9fbmFtZVwiPjxhIGNsYXNzPVwibGlua1wiIGhyZWY9XCInICsgcHJvZmlsZXVybCArICdcIj48aW1nIGNsYXNzPVwiZ2hfX2F2YXRhclwiIHNyYz1cIicgKyBhdml1cmwgKyAnXCI+QCcgKyB1c2VybmFtZSArICc8L2E+PC9oND4nO1xuICAgICAgICAgICAgICAgICAgb3V0aHRtbCA9IG91dGh0bWwgKyAnPHNwYW4gY2xhc3M9XCJnaF9fcmVwb3NcIj5SZXBvenl0b3Jpw7N3OiAnICsgcmVwb3NudW0gKyAnPC9zcGFuPjxoci8+PC9kaXY+JztcbiAgICAgICAgICAgICAgICAgICQoJ1tkYXRhLWdpdGh1Yl0gLnRvb2x0aXAnKS5hcHBlbmQob3V0aHRtbCk7XG4gIFxuICAgICAgICAgICAgICB9IC8vIGVuZCBlbHNlIHN0YXRlbWVudFxuICAgICAgICAgIH0pOyAvLyBlbmQgcmVxdWVzdEpTT04gQWpheCBjYWxsXG4gICAgICB9XG4gIFxuICAgICAgZnVuY3Rpb24gcmVxdWVzdEpTT04odXJsLCBjYWxsYmFjaykge1xuICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24oeGhyKSB7XG4gICAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKG51bGwsIHhoci5yZXNwb25zZUpTT04pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBsb2FkTGFzdGZtKCkge1xuICAgICAgLy8gUG9iaWVyYSB1cmwgeiBocmVmYVxuICAgICAgdmFyIHByb2ZpbGVVcmwgPSAkKCdhW2RhdGEtbGFzdGZtXScpLmF0dHIoJ2hyZWYnKTtcbiAgICAgIC8vIE9kcG93aWVkbmlvIG9iY2luYSBnbyBkbyB1c2VybmFtZVxuICAgICAgdmFyIHVzZXJuYW1lID0gcHJvZmlsZVVybC5zdWJzdHIoMjcpO1xuICAgICAgdmFyIGJhc2VVcmwgPSAnaHR0cDovL3dzLmF1ZGlvc2Nyb2JibGVyLmNvbS8yLjAvP21ldGhvZD11c2VyLmdldHJlY2VudHRyYWNrcyc7XG4gICAgICB2YXIgYXBpX2tleSA9ICcyOTkwMjBjMDYyYzQ4MWYwODNlY2QwMjc2YzMxNWUzYSc7XG4gIFxuICAgICAgdmFyIHJlcXVlc3RVcmwgPSBiYXNlVXJsICsgJyZ1c2VyPScgKyB1c2VybmFtZSArICcmYXBpX2tleT0nICsgYXBpX2tleSArICcmZm9ybWF0PWpzb24nO1xuICAgICAgY29uc29sZS5sb2codXNlcm5hbWUpO1xuICAgICAgaWYgKCQoJ1tkYXRhLWxhc3RmbV0gLnRvb2x0aXAnKS5pcygnOmVtcHR5JykpIHtcbiAgICAgICAgICAkLmdldEpTT04ocmVxdWVzdFVybCwgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICB2YXIgYXJ0aXN0ID0gZGF0YS5yZWNlbnR0cmFja3MudHJhY2tbMF0uYXJ0aXN0W1wiI3RleHRcIl07XG4gICAgICAgICAgICAgIHZhciBzb25nID0gZGF0YS5yZWNlbnR0cmFja3MudHJhY2tbMF1bXCJuYW1lXCJdO1xuICAgICAgICAgICAgICB2YXIgY292ZXIgPSBkYXRhLnJlY2VudHRyYWNrcy50cmFja1swXS5pbWFnZVszXVtcIiN0ZXh0XCJdO1xuICAgICAgICAgICAgICBpZiAoY292ZXIgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgIGNvdmVyID0gXCJodHRwOi8vaW1nMi1hay5sc3QuZm0vaS91LzE3NHMvNDEyOGE2ZWIyOWY5NDk0M2M5ZDIwNmMwOGU2MjU5MDQucG5nXCI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdmFyIG91dGh0bWwgPSAnPGRpdiBjbGFzcz1cImxmXCI+PGltZyBjbGFzcz1cImxmX19jb3ZlclwiIHNyYz1cIicgKyBjb3ZlciArICdcIi8+PGRpdiBjbGFzcz1cImxmX190cmFja0luZm9cIj48c3BhbiBjbGFzcz1cImxmX19hcnRpc3RcIj4nICsgYXJ0aXN0ICsgJzwvc3Bhbj48c3BhbiBjbGFzcz1cImxmX19zb25nXCI+JyArIHNvbmcgKyAnPC9zcGFuPjwvZGl2PjwvZGl2Pic7XG4gICAgICAgICAgICAgICQoJ1tkYXRhLWxhc3RmbV0gLnRvb2x0aXAnKS5hcHBlbmQob3V0aHRtbCk7XG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gIH1cblxuICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcbiAgICAgIHZhciBiTGF6eSA9IG5ldyBCbGF6eSh7XG4gICAgICAgIG9mZnNldDogMjAsXG4gICAgICAgIHNlbGVjdG9yOiAnLmJsYXp5JyxcbiAgICAgICAgbG9hZEludmlzaWJsZTogZmFsc2UsXG4gICAgICAgIGJyZWFrcG9pbnRzOiBbe1xuICAgICAgICAgIHdpZHRoOiAzNjAsIC8vIE1heC13aWR0aFxuICAgICAgICAgIHNyYzogJ2RhdGEtc3JjLXNtYWxsJ1xuICAgICAgICB9XSxcbiAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICQoZWxlbWVudCkucGFyZW50KCkucmVtb3ZlQ2xhc3MoJ2xvYWRpbmcnLCA1MDApO1xuICAgICAgICAgIHVwZGF0ZUNvdW50ZXIoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKGVsZW1lbnQsIG1zZykge1xuICAgICAgICAgIGlmIChtc2cgPT09ICdtaXNzaW5nJykge1xuICAgICAgICAgICAgJChlbGVtZW50KS5wYXJlbnQoKS5yZW1vdmVDbGFzcygnbG9hZGluZycsIDUwMCk7IC8vIERhdGEtc3JjIGlzIG1pc3NpbmdcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJiTGF6eTogZGF0YS1zcmMgaXMgbWlzc2luZ1wiKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKG1zZyA9PT0gJ2ludmFsaWQnKSB7XG4gICAgICAgICAgICAkKGVsZW1lbnQpLnBhcmVudCgpLnJlbW92ZUNsYXNzKCdsb2FkaW5nJywgNTAwKTtcbiAgICAgICAgICAgIC8vIERhdGEtc3JjIGlzIGludmFsaWRcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJiTGF6eTogZGF0YS1zcmMgaXMgaW52YWxpZFwiKTtcbiAgICBcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgLy8gbm90IG5lZWRlZCwgb25seSBoZXJlIHRvIGlsbHVzdHJhdGUgYW1vdW50IG9mIGxvYWRlZCBpbWFnZXNcbiAgICAgIHZhciBpbWFnZUxvYWRlZCA9IDA7XG4gICAgXG4gICAgICBmdW5jdGlvbiB1cGRhdGVDb3VudGVyKCkge1xuICAgICAgICBpbWFnZUxvYWRlZCsrO1xuICAgICAgICBjb25zb2xlLmluZm8oXCJiTGF6eTogSW1hZ2VzIGxvYWRlZDogJWRcIiwgaW1hZ2VMb2FkZWQpO1xuICAgICAgfVxuICAgIFxuICAgICAgLy8gdGFicyhiTGF6eSk7XG5cbiAgICAvLy8vPSBtZW1iZXIuanNcblxuICAgIC8vIGh0dHA6Ly9hcnJlc3RlZGRldmVsb3Blci5uZXQvd29yZHByZXNzLWluZmluaXRlLXNjcm9sbC13aXRoLXdvcmRwcmVzcy1wb3N0cy1hbmQtd2F5cG9pbnRzLWpzL1xuICAgIFxuICAgIC8vIENoeWJhIHogdGVnbyB6cm9iacSHIG5hbGXFvHkgb2JqZWt0XG4gICAgXG4gICAgdmFyIHByb2plY3Rfc3RhdHVzID0gJCgnI2ZpbmlzaGVkX3Byb2plY3RzJykuYXR0cignZGF0YS1wcm9qZWN0cy1zdGF0dXMnKTtcbiAgICB2YXIgYWpheF91cmwgPSBqUXVlcnkoJyNwcm9qZWN0cycpLmF0dHIoJ2RhdGEtYWpheC11cmwnKTtcbiAgICB2YXIgdG90YWxfZmluaXNoZWRfcHJvamVjdHMgPSBqUXVlcnkoJyNmaW5pc2hlZF9wcm9qZWN0cycpLmF0dHIoJ2RhdGEtdG90YWwtZmluaXNoZWQtcHJvamVjdHMnKTtcbiAgICB2YXIgdG90YWxfaW5fcHJvZ3Jlc3NfcHJvamVjdHMgPSBqUXVlcnkoJyNpbl9wcm9ncmVzc19wcm9qZWN0cycpLmF0dHIoJ2RhdGEtdG90YWwtaW4tcHJvZ3Jlc3MtcHJvamVjdHMnKTtcbiAgICB2YXIgdG90YWxfaWRlYXNfcHJvamVjdHMgPSBqUXVlcnkoJyNpZGVhc19wcm9qZWN0cycpLmF0dHIoJ2RhdGEtdG90YWwtaWRlYXMtcHJvamVjdHMnKTtcbiAgICB2YXIgcG9zdF9vZmZzZXQgPSAwO1xuICAgIHZhciBsb2FkZWRfZmluaXNoZWRfcHJvamVjdHMgPSAwO1xuICAgIFxuICAgIC8vIFNrcm9sdWplbXkgZG8gc3RvcGtpLCB3dGVkeSB1cnVjaGFtaWEgc2nEmSBmdW5rY2phIGxvYWRQcm9qZWN0cygpXG4gICAgaWYgKGFqYXhfdXJsKSB7XG4gICAgICAkKHdpbmRvdykuc2Nyb2xsKGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoJCh3aW5kb3cpLnNjcm9sbFRvcCgpID49ICQoZG9jdW1lbnQpLmhlaWdodCgpIC0gJCh3aW5kb3cpLmhlaWdodCgpIC0gMTAwKSB7XG4gICAgICAgICAgaWYgKCQoJyNpZGVhc19wcm9qZWN0cycpLmlzKCc6dmlzaWJsZScpKSB7XG4gICAgICAgICAgICBsb2FkZWRfaWRlYXNfcHJvamVjdHMgPSAkKCcjaWRlYXNfcHJvamVjdHMnKS5jaGlsZHJlbigpLmxlbmd0aDtcbiAgICAgICAgICAgIGxvYWRQcm9qZWN0cygnaWRlYXMnLCB0b3RhbF9pZGVhc19wcm9qZWN0cywgbG9hZGVkX2lkZWFzX3Byb2plY3RzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoJCgnI2luX3Byb2dyZXNzX3Byb2plY3RzJykuaXMoJzp2aXNpYmxlJykpIHtcbiAgICAgICAgICAgIGxvYWRlZF9pbl9wcm9ncmVzc19wcm9qZWN0cyA9ICQoJyNpbl9wcm9ncmVzc19wcm9qZWN0cycpLmNoaWxkcmVuKCkubGVuZ3RoO1xuICAgICAgICAgICAgbG9hZFByb2plY3RzKCdpbl9wcm9ncmVzcycsIHRvdGFsX2luX3Byb2dyZXNzX3Byb2plY3RzLCBsb2FkZWRfaW5fcHJvZ3Jlc3NfcHJvamVjdHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmICgkKCcjZmluaXNoZWRfcHJvamVjdHMnKS5pcygnOnZpc2libGUnKSkge1xuICAgICAgICAgICAgbG9hZGVkX2ZpbmlzaGVkX3Byb2plY3RzID0gJCgnI2ZpbmlzaGVkX3Byb2plY3RzJykuY2hpbGRyZW4oKS5sZW5ndGg7XG4gICAgICAgICAgICBsb2FkUHJvamVjdHMoJ2ZpbmlzaGVkJywgdG90YWxfZmluaXNoZWRfcHJvamVjdHMsIGxvYWRlZF9maW5pc2hlZF9wcm9qZWN0cyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgXG4gICAgXG4gICAgZnVuY3Rpb24gbG9hZFByb2plY3RzKHByb2plY3RzX3N0YXR1cywgdG90YWxfcHJvamVjdHMsIGxvYWRlZF9wcm9qZWN0cykge1xuICAgICAgcG9zdF9vZmZzZXQgPSBwYXJzZUludChwb3N0X29mZnNldCkgKyA2O1xuICAgICAgY29uc29sZS5pbmZvKFwiTG9hZGVkICVzIHByb2plY3RzOiAlZC8lZFwiLHByb2plY3RzX3N0YXR1cywgbG9hZGVkX3Byb2plY3RzLCB0b3RhbF9wcm9qZWN0cyk7XG4gICAgXG4gICAgICBpZiAodG90YWxfcHJvamVjdHMgPiBsb2FkZWRfcHJvamVjdHMpIHtcbiAgICAgICAgJCgnLmxvYWRlcicpLnNob3coKTtcbiAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICB1cmw6IGFqYXhfdXJsLFxuICAgICAgICAgIHR5cGU6ICdQT1NUJyxcbiAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBhY3Rpb246ICdsb2FkX3Byb2plY3RzJyxcbiAgICAgICAgICAgIHBvc3Rfb2Zmc2V0OiBwb3N0X29mZnNldCxcbiAgICAgICAgICAgIHByb2plY3RzX3N0YXR1czogcHJvamVjdHNfc3RhdHVzLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgJCgnIycgKyBwcm9qZWN0c19zdGF0dXMgKyAnX3Byb2plY3RzJykuYXBwZW5kKGRhdGEpO1xuICAgICAgICAgICAgLy8gJChkYXRhKS5oaWRlKCkuYXBwZW5kVG8oJyMnICsgcHJvamVjdHNfc3RhdHVzICsgJ19wcm9qZWN0cycpLnNob3coMjAwKTtcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnQWpheDogTG9hZGVkIG1vcmUgJXMgcHJvamVjdHMnLCBwcm9qZWN0c19zdGF0dXMpO1xuICAgICAgICAgICAgYkxhenkucmV2YWxpZGF0ZSgpO1xuICAgICAgICAgICAgY2FyZEV4Y2VycHQoKTtcbiAgICAgICAgICAgICQoJy5sb2FkZXInKS5oaWRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbml0VG9wYmFyKCkge1xuICAgICAgICAkKCcudG9wYmFyV3JhcHBlcicpLnNjcm9sbHVwYmFyKHtcbiAgICAgICAgICAgIGVudGVyVmlld3BvcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICQoJy50b3BiYXJXcmFwcGVyJykuYWRkQ2xhc3MoJ3RvcGJhcldyYXBwZXItLXZpc2libGUnKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmdWxseUVudGVyVmlld3BvcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICQoJyNsYXN0LWV2ZW50JykudGV4dCgnZnVsbHlFbnRlclZpZXdwb3J0Jyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXhpdFZpZXdwb3J0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAkKCcjbGFzdC1ldmVudCcpLnRleHQoJ2V4aXRWaWV3cG9ydCcpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhcnRpYWxseUV4aXRWaWV3cG9ydDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgJCgnI2xhc3QtZXZlbnQnKS50ZXh0KCdwYXJ0aWFsbHlFeGl0Vmlld3BvcnQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGluaXRUb3BiYXIoKTtcbiAgICBcbiAgICBpZiAoJCh3aW5kb3cpLndpZHRoKCkgPCA3NTApIHtcbiAgICAgICAgJC5zY3JvbGx1cGJhci5kZXN0cm95KCcudG9wYmFyV3JhcHBlcicpO1xuICAgIH1cbiAgICBcbiAgICAkKHdpbmRvdykuc2Nyb2xsKGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIC8vIGRpZFNjcm9sbCA9IHRydWU7XG4gICAgICAgIHZhciBzdCA9ICQodGhpcykuc2Nyb2xsVG9wKCk7XG4gICAgICAgIC8vIEdkeSBqZXN0ZcWbbXkgbmEgc2FtZWogZ8OzcnplLCB0byBwb2thenlqZW15IGNhxYJlIGxvZ29cbiAgICAgICAgaWYgKHN0ID09PSAwKSB7XG4gICAgICAgICAgICAkKCcudG9wYmFyV3JhcHBlcicpLnJlbW92ZUNsYXNzKCd0b3BiYXJXcmFwcGVyLS12aXNpYmxlJyk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciB0YWJzID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY3VycmVudFRhYjtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIC8vIHBvYmllcmFteSBocmVmXG4gICAgICAgICAgICAgICAgY3VycmVudFRhYiA9ICQoJy50YWJzTWVudV9faXRlbS0tY3VycmVudCAubGluay0tdGFiJykuYXR0cignaHJlZicpO1xuICAgICAgICAgICAgICAgIC8vIGhyZWYgamVzdCBqZWRub2N6ZcWbbmllIGlkIG9kcG93aWVkbmllZ28gdGFidSwga3TDs3J5IHd5xZt3aWV0bGFteVxuICAgICAgICAgICAgICAgICQoY3VycmVudFRhYikuYWRkQ2xhc3MoJ3RhYl9fY29udGVudC0tdmlzaWJsZScpO1xuICAgICAgICAgICAgICAgIC8vIMWCYWR1amVteSBvYnJhemtpXG4gICAgICAgICAgICAgICAgYkxhenkubG9hZCgkKFwiLmJsYXp5XCIsIGN1cnJlbnRUYWIpLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmluZm8oJ1RhYnMgaW5pdGlhdGVkOicsIGN1cnJlbnRUYWIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlc2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAvLyBaIHR5bSAjdGFic1Jlc2V0LCB0byB0YWtpIGhhY2suIFd5a29yenlzdHl3YW55IGRsYXRlZ28sIMW8ZVxuICAgICAgICAgICAgICAgIC8vIHBvIGtsaWtuacSZY2l1IGNob3dhasSFIHNpxJkgd3N6eXN0a2llIHRhYnksIG9wcsOzY3ogdGVqIHogb2Rwb3dpZWRuaW0gaWRcbiAgICAgICAgICAgICAgICBjdXJyZW50VGFiID0gJCgnI3RhYnNSZXNldCAubGluay0tdGFiJykuYXR0cignaHJlZicpO1xuICAgICAgICAgICAgICAgICQoY3VycmVudFRhYikucmVtb3ZlQ2xhc3MoXCJ0YWJfX2NvbnRlbnQtLWhpZGRlblwiKS5hZGRDbGFzcyhcInRhYl9fY29udGVudC0tdmlzaWJsZVwiKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmluZm8oJ1RhYnMgaW5pdGlhdGVkOicsIGN1cnJlbnRUYWIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0pKCk7XG4gICAgdGFicy5pbml0KCk7XG4gICAgXG4gICAgJChcIi5nbG9iYWxcIikub24oJ2NsaWNrJywgJy5saW5rLS10YWInLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAvLyB3ecWCxIVjemEgZG9tecWbbG5lIHByemVqxZtjaWUgbmEgYWRyZXMgbGlua3VcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgLy8gZG9kYWplIGtsYXPEmSBkbyA8bGk+XG4gICAgICAgICQodGhpcykucGFyZW50KCkuYWRkQ2xhc3MoXCJ0YWJzTWVudV9faXRlbS0tY3VycmVudFwiKTtcbiAgICAgICAgLy8gdXN1d2Ega2xhc8SZIHogPGxpPlxuICAgICAgICAkKHRoaXMpLnBhcmVudCgpLnNpYmxpbmdzKCkucmVtb3ZlQ2xhc3MoXCJ0YWJzTWVudV9faXRlbS0tY3VycmVudFwiKTtcbiAgICAgICAgLy8gcG9iaWVyYW15IGlkIHogaHJlZnVcbiAgICAgICAgdmFyIHRhYiA9ICQodGhpcykuYXR0cihcImhyZWZcIik7XG4gICAgICAgIC8vIGplxZtsaSBibG9rIG5pZSBtYSB0YWtpZWdvIGlkLCB0byBjaG93YW15IGdvXG4gICAgICAgICQoXCIudGFiX19jb250ZW50XCIpLm5vdCh0YWIpLmFkZENsYXNzKFwidGFiX19jb250ZW50LS1oaWRkZW5cIikucmVtb3ZlQ2xhc3MoXCJ0YWJfX2NvbnRlbnQtLXZpc2libGVcIik7XG4gICAgICAgIC8vIGEgamXFm2xpIG1hLCB0byBwb2thenVqZW15XG4gICAgICAgICQodGFiKS5yZW1vdmVDbGFzcyhcInRhYl9fY29udGVudC0taGlkZGVuXCIpLmFkZENsYXNzKFwidGFiX19jb250ZW50LS12aXNpYmxlXCIpO1xuICAgICAgICAvLyDFgmFkdWplbXkgb2JyYXpraSB3IGJsb2t1IHogb2Rwb3dpZWRuaW0gaWRcbiAgICAgICAgYkxhenkubG9hZCgkKFwiLmJsYXp5XCIsIHRhYiksIHRydWUpO1xuICAgIH0pO1xuXG4gICAgKGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBodHRwczovL21hcmNpbi5sYWJlci5wbC8yMDE0LzA5L29kbWlhbmEtbGljemVibmlrb3ctdy1qYXZhc2NyaXB0L1xuICAgICAgICB2YXIgbnVtID0gZnVuY3Rpb24odmFsdWUsIG51bWVyYWxzLCB3b3ZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgdDAgPSB2YWx1ZSAlIDEwLFxuICAgICAgICAgICAgICAgIHQxID0gdmFsdWUgJSAxMDAsXG4gICAgICAgICAgICAgICAgdm8gPSBbXTtcbiAgICAgICAgICAgIGlmICh3b3ZhbHVlICE9PSB0cnVlKVxuICAgICAgICAgICAgICAgIHZvLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgaWYgKHZhbHVlID09PSAxICYmIG51bWVyYWxzWzFdKVxuICAgICAgICAgICAgICAgIHZvLnB1c2gobnVtZXJhbHNbMV0pO1xuICAgICAgICAgICAgZWxzZSBpZiAoKHZhbHVlID09PSAwIHx8ICh0MCA+PSAwICYmIHQwIDw9IDEpIHx8ICh0MCA+PSA1ICYmIHQwIDw9IDkpIHx8ICh0MSA+IDEwICYmIHQxIDwgMjApKSAmJiBudW1lcmFsc1swXSlcbiAgICAgICAgICAgICAgICB2by5wdXNoKG51bWVyYWxzWzBdKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKCgodDEgPCAxMCB8fCB0MSA+IDIwKSAmJiB0MCA+PSAyICYmIHQwIDw9IDQpICYmIG51bWVyYWxzWzJdKVxuICAgICAgICAgICAgICAgIHZvLnB1c2gobnVtZXJhbHNbMl0pO1xuICAgICAgICAgICAgcmV0dXJuIHZvWzFdO1xuICAgICAgICB9O1xuICAgIFxuICAgICAgICAkKCcuY291bnRlcicpLmVhY2goZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBzdGF0dXMgPSAkKHRoaXMpLmF0dHIoJ2lkJyk7XG4gICAgICAgICAgICB2YXIgY291bnQgPSBwYXJzZUludCgkKHRoaXMpLmNoaWxkcmVuKCdhJykuaHRtbCgpKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGNvdW50LCBzdGF0dXMpO1xuICAgICAgICAgICAgaWYgKHN0YXR1cyA9PT0gJ2ZpbmlzaGVkJykge1xuICAgICAgICAgICAgICAgICQodGhpcykuZmluZCgnLmNvdW50ZXJfX2xhYmVsJykuaHRtbChudW0oY291bnQsIFtcIlByb2pla3TDs3cgdWtvxYRjem9ueWNoXCIsIFwiUHJvamVrdCB1a2/FhGN6b255XCIsIFwiUHJvamVrdHkgdWtvxYRjem9uZVwiXSkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkKHRoaXMpLmZpbmQoJy5jb3VudGVyX19sYWJlbCcpLmh0bWwobnVtKGNvdW50LCBbXCJQcm9qZWt0w7N3IHJlYWxpem93YW55Y2hcIiwgXCJQcm9qZWt0IHJlYWxpem93YW55XCIsIFwiUHJvamVrdHkgcmVhbGl6b3dhbmVcIl0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgXG4gICAgfSkoKTtcblxuICB9KTtcblxuICAvLyBQcmV6ZXMgemF3c3plIG5hIHBpZXJ3c3p5bSBtaWVqc2N1IC8vXG4gICQoJy5tZW1iZXJjYXJkI3ByZXNpZGVudCcpLmluc2VydEJlZm9yZSgnI2N1cnJlbnRfbWVtYmVycyAuY2FyZHNXcmFwcGVyIGRpdjplcSgwKScpO1xuXG4gIC8vIERvZGFqZSBkbyA8YT4ga2xhc8SZIFwibGlua1wiXG4gICQoJy5wcm9qZWN0X19jb250ZW50IGEnKS5hZGRDbGFzcygnbGluaycpO1xuXG59KTsiXSwiZmlsZSI6Im1haW4ubWluLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
