jQuery(function($) {
  //BURGER//////////////////////////////
  $("button").click(function() { //
    $(this).toggleClass("close"); //
  }); //
  //////////////////////////////////////
  $(function() {
    // Touch ripple effect on buttons
    $('[am-button]:not([am-button~="disabled"])').on('click',

      function(e) {

        /*!
        SVG version for ripple effect via Jonathan Cutrell (gently modified)
        http://webdesign.tutsplus.com/tutorials/recreating-the-touch-ripple-effect-as-seen-on-google-design--cms-21655
        */

        var x = e.pageX;
        var y = e.pageY;
        var clickY = y - $(this).offset().top;
        var clickX = x - $(this).offset().left;
        var box = this;

        var setX = parseInt(clickX);
        var setY = parseInt(clickY);
        var ripple = '<svg class="ink"><circle cx="' + setX + '" cy="' + setY + '" r="' + 0 + '"></circle></svg>';

        $(this).find('.ink').remove();
        $(this).append(ripple);

        var c = $(box).find('circle');
        c.animate({
          'r': $(box).outerWidth()
        }, {
          duration: 333,
          step: function(val) {
            c.attr('r', val);
          },
          complete: function() {
            c.fadeOut('fast');
          }
        });

        return true;

      });

  });
});

/* ========================================================================
 * Bootstrap: transition.js v3.2.0
 * http://getbootstrap.com/javascript/#transitions
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


jQuery(function($) {
  'use strict';

  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
  // ============================================================

  function transitionEnd() {
    var el = document.createElement('bootstrap');

    var transEndEventNames = {
      WebkitTransition: 'webkitTransitionEnd',
      MozTransition: 'transitionend',
      OTransition: 'oTransitionEnd otransitionend',
      transition: 'transitionend'
    };

    for (var name in transEndEventNames) {
      if (el.style[name] !== undefined) {
        return {
          end: transEndEventNames[name]
        };
      }
    }

    return false; // explicit for ie8 (  ._.)
  }

  // http://blog.alexmaccaw.com/css-transitions
  $.fn.emulateTransitionEnd = function(duration) {
    var called = false;
    var $el = this;
    $(this).one('bsTransitionEnd', function() {
      called = true;
    });
    var callback = function() {
      if (!called) $($el).trigger($.support.transition.end);
    };
    setTimeout(callback, duration);
    return this;
  };

  $(function() {
    $.support.transition = transitionEnd();

    if (!$.support.transition) return;

    $.event.special.bsTransitionEnd = {
      bindType: $.support.transition.end,
      delegateType: $.support.transition.end,
      handle: function(e) {
        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments);
      }
    };
  });

});

/* ========================================================================
 * Bootstrap: collapse.js v3.2.0
 * http://getbootstrap.com/javascript/#collapse
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


jQuery(function($) {
  'use strict';

  // COLLAPSE PUBLIC CLASS DEFINITION
  // ================================

  var Collapse = function(element, options) {
    this.$element = $(element);
    this.options = $.extend({}, Collapse.DEFAULTS, options);
    this.transitioning = null;

    if (this.options.parent) this.$parent = $(this.options.parent);
    if (this.options.toggle) this.toggle();
  };

  Collapse.VERSION = '3.2.0';

  Collapse.DEFAULTS = {
    toggle: true
  };

  Collapse.prototype.dimension = function() {
    var hasWidth = this.$element.hasClass('width');
    return hasWidth ? 'width' : 'height';
  };

  Collapse.prototype.show = function() {
    if (this.transitioning || this.$element.hasClass('in')) return;

    var startEvent = $.Event('show.bs.collapse');
    this.$element.trigger(startEvent);
    if (startEvent.isDefaultPrevented()) return;

    var actives = this.$parent && this.$parent.find('> .panel > .in');

    if (actives && actives.length) {
      var hasData = actives.data('bs.collapse');
      if (hasData && hasData.transitioning) return;
      Plugin.call(actives, 'hide');
      // hasData || actives.data('bs.collapse', null)
    }

    var dimension = this.dimension();

    this.$element
      .removeClass('collapse')
      .addClass('collapsing')[dimension](0);

    this.transitioning = 1;

    var complete = function() {
      this.$element
        .removeClass('collapsing')
        .addClass('collapse in')[dimension]('');
      this.transitioning = 0;
      this.$element
        .trigger('shown.bs.collapse');
    };

    if (!$.support.transition) return complete.call(this);

    var scrollSize = $.camelCase(['scroll', dimension].join('-'));

    this.$element
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(350)[dimension](this.$element[0][scrollSize]);
  };

  Collapse.prototype.hide = function() {
    if (this.transitioning || !this.$element.hasClass('in')) return;

    var startEvent = $.Event('hide.bs.collapse');
    this.$element.trigger(startEvent);
    if (startEvent.isDefaultPrevented()) return;

    var dimension = this.dimension();

    this.$element[dimension](this.$element[dimension]())[0].offsetHeight

    this.$element
      .addClass('collapsing')
      .removeClass('collapse')
      .removeClass('in');

    this.transitioning = 1;

    var complete = function() {
      this.transitioning = 0;
      this.$element
        .trigger('hidden.bs.collapse')
        .removeClass('collapsing')
        .addClass('collapse');
    };

    if (!$.support.transition) return complete.call(this);

    this.$element[dimension](0)
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(350);
  };

  Collapse.prototype.toggle = function() {
    this[this.$element.hasClass('in') ? 'hide' : 'show']();
  };


  // COLLAPSE PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function() {
      var $this = $(this);
      var data = $this.data('bs.collapse');
      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option);

      if (!data && options.toggle && option == 'show') option = !option;
      if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)));
      if (typeof option == 'string') data[option]();
    });
  }
  var old = $.fn.collapse;

  $.fn.collapse = Plugin;
  $.fn.collapse.Constructor = Collapse;


  // COLLAPSE NO CONFLICT
  // ====================

  $.fn.collapse.noConflict = function() {
    $.fn.collapse = old;
    return this;
  };


  // COLLAPSE DATA-API
  // =================

  $(document).on('click.bs.collapse.data-api', '[data-toggle="collapse"]', function(e) {
    var href;
    var $this = $(this);
    var target = $this.attr('data-target') || e.preventDefault() || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, ''); // strip for ie7
    var $target = $(target);
    var data = $target.data('bs.collapse');
    var option = data ? 'toggle' : $this.data();
    var parent = $this.attr('data-parent');
    var $parent = parent && $(parent);

    if (!data || !data.transitioning) {
      if ($parent) $parent.find('[data-toggle="collapse"][data-parent="' + parent + '"]').not($this).addClass('collapsed');
      $this[$target.hasClass('in') ? 'addClass' : 'removeClass']('collapsed');
    }

    Plugin.call($target, option);
  });

  //TABS
  $(function() {
    // set active radio to address bar
    $(document).on('click', '.tabs .tabs-nav label', function() {
      var hash = '#' + $(this).attr('for');
      window.history.replaceState('', '', hash);
    });
    // select active radio based on hash
    $(document.location.hash).prop('checked', true);
  });
});

// Pobieranie nicków z url i wyświetlanie ich koło ikon społecznościowych
// oraz wykorzystanie username'u githuba do wyświetlenia ostatnie aktywności
jQuery(function($) {
  $('.userinfo a').each(function(index) {
    var profile = $(this).attr('href');
    var gith = profile.substr(19);
    if (profile.indexOf('github') > -1) {
      $('a[github]').append(gith);
      Github.onlyuserActivity({
        username: gith,
        selector: ".github",
        limit: 10
      });
    }
    if (profile.indexOf('twitter') > -1) {
      $('a[twitter]').append(profile.substr(20));
    }
    if (profile.indexOf('face') > -1) {
      $('a[face]').append(profile.substr(25));
    }
  });

});

jQuery(".excerpt").text(function(index, currentText) {
  return currentText.substr(0, 150) + '...';
});

//Skraca imiona, by nie wychodziły za bloki
jQuery(function($) {
  $('.co-author h3 a').each(function(index) {
    var length = $(this).html().length;
    if (length > 13) {
      var name = $(this).text();
      // console.log(name);
      var trimmed_name = name.charAt(0) + ". " + name.substr(name.indexOf(' ') + 1);
      // console.log(trimmed_name);
      $(this).text(trimmed_name);
    }
  });
});
// Pakuje mniejsze obrazki bez podpisu w <figure> //
jQuery(function($) {
  $('.project-content p').each(function(index) {
    var some_img = $(this).find('img');
    var width = some_img.ht();
    if (width < 980) {
      some_img.wrap("<figure></figure>");
    }
  });
});

// Dropdown download button //

// http://codepen.io/jakestuts/pen/nEFyw
jQuery(function($) {

  $("#dropdown button").on("click", function(e) {
    e.preventDefault();

    if ($(this).hasClass("open")) {
      $(this).removeClass("open");
      $(this).siblings("ul").slideUp("fast");

    } else {
      $(this).addClass("open");
      $(this).siblings("ul").slideDown("fast");
    }
  });
});

// Prezes zawsze na pierwszym miejscu //
// Pozwalają otwierać baner tylko przy pierwszej wizycie
// http://stackoverflow.com/questions/24070627/create-dropdown-banner-when-user-first-visits-website
jQuery(function($) {
  $('#management_board li#admin').insertBefore('#management_board li:eq(0)');
});
// Ciastka dla banera //
jQuery(window).load(function() {
  // Check if cookie
  if (Cookies.get('synergia_recruitment_banner') !== "closed") {
    jQuery("#modal").prop('checked', true);
  }
  // On button click close and add cookie (expires in 100 days)
  jQuery('#close_banner').on('click', function() {
    Cookies.set('synergia_recruitment_banner', 'closed', {
      expires: 100,
      path: ''
    });
    // jQuery("#modal").prop('checked', false);
  });
});
jQuery(function($) {
  $('label[am-button]').on('click', function() {
    $('.fb').addClass('animated fadeInUp');
    $('.date .icon-container').addClass('animated slideInLeft');
    $('.date span').addClass('animated slideInLeft');
    $('.location .icon-container').addClass('animated slideInRight');
    $('.location span').addClass('animated slideInRight');

  });
  $('#close_banner').on('click', function() {
    $('.fb').removeClass('animated fadeInUp');
    $('.date .icon-container').removeClass('animated slideInLeft');
    $('.date span').removeClass('animated slideInLeft');
    $('.location .icon-container').removeClass('animated slideInRight');
    $('.location span').removeClass('animated slideInRight');
  });
});
jQuery(function($) {
  $(".note-close").click(function() {
    $(this).parent()
      .animate({
        opacity: 0
      }, 250, function() {
        $(this)
          .animate({
            marginBottom: 0
          }, 250)
          .children()
          .animate({
            padding: 0
          }, 250)
          .wrapInner("<div />")
          .children()
          .slideUp(250, function() {
            $(this).closest(".note").remove();
          });
      });
  });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlcyI6WyJtYWluLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImpRdWVyeShmdW5jdGlvbigkKSB7XG4gIC8vQlVSR0VSLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICQoXCJidXR0b25cIikuY2xpY2soZnVuY3Rpb24oKSB7IC8vXG4gICAgJCh0aGlzKS50b2dnbGVDbGFzcyhcImNsb3NlXCIpOyAvL1xuICB9KTsgLy9cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgJChmdW5jdGlvbigpIHtcbiAgICAvLyBUb3VjaCByaXBwbGUgZWZmZWN0IG9uIGJ1dHRvbnNcbiAgICAkKCdbYW0tYnV0dG9uXTpub3QoW2FtLWJ1dHRvbn49XCJkaXNhYmxlZFwiXSknKS5vbignY2xpY2snLFxuXG4gICAgICBmdW5jdGlvbihlKSB7XG5cbiAgICAgICAgLyohXG4gICAgICAgIFNWRyB2ZXJzaW9uIGZvciByaXBwbGUgZWZmZWN0IHZpYSBKb25hdGhhbiBDdXRyZWxsIChnZW50bHkgbW9kaWZpZWQpXG4gICAgICAgIGh0dHA6Ly93ZWJkZXNpZ24udHV0c3BsdXMuY29tL3R1dG9yaWFscy9yZWNyZWF0aW5nLXRoZS10b3VjaC1yaXBwbGUtZWZmZWN0LWFzLXNlZW4tb24tZ29vZ2xlLWRlc2lnbi0tY21zLTIxNjU1XG4gICAgICAgICovXG5cbiAgICAgICAgdmFyIHggPSBlLnBhZ2VYO1xuICAgICAgICB2YXIgeSA9IGUucGFnZVk7XG4gICAgICAgIHZhciBjbGlja1kgPSB5IC0gJCh0aGlzKS5vZmZzZXQoKS50b3A7XG4gICAgICAgIHZhciBjbGlja1ggPSB4IC0gJCh0aGlzKS5vZmZzZXQoKS5sZWZ0O1xuICAgICAgICB2YXIgYm94ID0gdGhpcztcblxuICAgICAgICB2YXIgc2V0WCA9IHBhcnNlSW50KGNsaWNrWCk7XG4gICAgICAgIHZhciBzZXRZID0gcGFyc2VJbnQoY2xpY2tZKTtcbiAgICAgICAgdmFyIHJpcHBsZSA9ICc8c3ZnIGNsYXNzPVwiaW5rXCI+PGNpcmNsZSBjeD1cIicgKyBzZXRYICsgJ1wiIGN5PVwiJyArIHNldFkgKyAnXCIgcj1cIicgKyAwICsgJ1wiPjwvY2lyY2xlPjwvc3ZnPic7XG5cbiAgICAgICAgJCh0aGlzKS5maW5kKCcuaW5rJykucmVtb3ZlKCk7XG4gICAgICAgICQodGhpcykuYXBwZW5kKHJpcHBsZSk7XG5cbiAgICAgICAgdmFyIGMgPSAkKGJveCkuZmluZCgnY2lyY2xlJyk7XG4gICAgICAgIGMuYW5pbWF0ZSh7XG4gICAgICAgICAgJ3InOiAkKGJveCkub3V0ZXJXaWR0aCgpXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBkdXJhdGlvbjogMzMzLFxuICAgICAgICAgIHN0ZXA6IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgICAgYy5hdHRyKCdyJywgdmFsKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGMuZmFkZU91dCgnZmFzdCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgIH0pO1xuXG4gIH0pO1xufSk7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiB0cmFuc2l0aW9uLmpzIHYzLjIuMFxuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jdHJhbnNpdGlvbnNcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNCBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxualF1ZXJ5KGZ1bmN0aW9uKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIENTUyBUUkFOU0lUSU9OIFNVUFBPUlQgKFNob3V0b3V0OiBodHRwOi8vd3d3Lm1vZGVybml6ci5jb20vKVxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kKCkge1xuICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Jvb3RzdHJhcCcpO1xuXG4gICAgdmFyIHRyYW5zRW5kRXZlbnROYW1lcyA9IHtcbiAgICAgIFdlYmtpdFRyYW5zaXRpb246ICd3ZWJraXRUcmFuc2l0aW9uRW5kJyxcbiAgICAgIE1velRyYW5zaXRpb246ICd0cmFuc2l0aW9uZW5kJyxcbiAgICAgIE9UcmFuc2l0aW9uOiAnb1RyYW5zaXRpb25FbmQgb3RyYW5zaXRpb25lbmQnLFxuICAgICAgdHJhbnNpdGlvbjogJ3RyYW5zaXRpb25lbmQnXG4gICAgfTtcblxuICAgIGZvciAodmFyIG5hbWUgaW4gdHJhbnNFbmRFdmVudE5hbWVzKSB7XG4gICAgICBpZiAoZWwuc3R5bGVbbmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGVuZDogdHJhbnNFbmRFdmVudE5hbWVzW25hbWVdXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlOyAvLyBleHBsaWNpdCBmb3IgaWU4ICggIC5fLilcbiAgfVxuXG4gIC8vIGh0dHA6Ly9ibG9nLmFsZXhtYWNjYXcuY29tL2Nzcy10cmFuc2l0aW9uc1xuICAkLmZuLmVtdWxhdGVUcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24oZHVyYXRpb24pIHtcbiAgICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gICAgdmFyICRlbCA9IHRoaXM7XG4gICAgJCh0aGlzKS5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICB9KTtcbiAgICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICghY2FsbGVkKSAkKCRlbCkudHJpZ2dlcigkLnN1cHBvcnQudHJhbnNpdGlvbi5lbmQpO1xuICAgIH07XG4gICAgc2V0VGltZW91dChjYWxsYmFjaywgZHVyYXRpb24pO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gICQoZnVuY3Rpb24oKSB7XG4gICAgJC5zdXBwb3J0LnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uRW5kKCk7XG5cbiAgICBpZiAoISQuc3VwcG9ydC50cmFuc2l0aW9uKSByZXR1cm47XG5cbiAgICAkLmV2ZW50LnNwZWNpYWwuYnNUcmFuc2l0aW9uRW5kID0ge1xuICAgICAgYmluZFR5cGU6ICQuc3VwcG9ydC50cmFuc2l0aW9uLmVuZCxcbiAgICAgIGRlbGVnYXRlVHlwZTogJC5zdXBwb3J0LnRyYW5zaXRpb24uZW5kLFxuICAgICAgaGFuZGxlOiBmdW5jdGlvbihlKSB7XG4gICAgICAgIGlmICgkKGUudGFyZ2V0KS5pcyh0aGlzKSkgcmV0dXJuIGUuaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICB9O1xuICB9KTtcblxufSk7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiBjb2xsYXBzZS5qcyB2My4yLjBcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI2NvbGxhcHNlXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTQgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbmpRdWVyeShmdW5jdGlvbigkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBDT0xMQVBTRSBQVUJMSUMgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBDb2xsYXBzZSA9IGZ1bmN0aW9uKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gJChlbGVtZW50KTtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgQ29sbGFwc2UuREVGQVVMVFMsIG9wdGlvbnMpO1xuICAgIHRoaXMudHJhbnNpdGlvbmluZyA9IG51bGw7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLnBhcmVudCkgdGhpcy4kcGFyZW50ID0gJCh0aGlzLm9wdGlvbnMucGFyZW50KTtcbiAgICBpZiAodGhpcy5vcHRpb25zLnRvZ2dsZSkgdGhpcy50b2dnbGUoKTtcbiAgfTtcblxuICBDb2xsYXBzZS5WRVJTSU9OID0gJzMuMi4wJztcblxuICBDb2xsYXBzZS5ERUZBVUxUUyA9IHtcbiAgICB0b2dnbGU6IHRydWVcbiAgfTtcblxuICBDb2xsYXBzZS5wcm90b3R5cGUuZGltZW5zaW9uID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGhhc1dpZHRoID0gdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnd2lkdGgnKTtcbiAgICByZXR1cm4gaGFzV2lkdGggPyAnd2lkdGgnIDogJ2hlaWdodCc7XG4gIH07XG5cbiAgQ29sbGFwc2UucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy50cmFuc2l0aW9uaW5nIHx8IHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2luJykpIHJldHVybjtcblxuICAgIHZhciBzdGFydEV2ZW50ID0gJC5FdmVudCgnc2hvdy5icy5jb2xsYXBzZScpO1xuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihzdGFydEV2ZW50KTtcbiAgICBpZiAoc3RhcnRFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuO1xuXG4gICAgdmFyIGFjdGl2ZXMgPSB0aGlzLiRwYXJlbnQgJiYgdGhpcy4kcGFyZW50LmZpbmQoJz4gLnBhbmVsID4gLmluJyk7XG5cbiAgICBpZiAoYWN0aXZlcyAmJiBhY3RpdmVzLmxlbmd0aCkge1xuICAgICAgdmFyIGhhc0RhdGEgPSBhY3RpdmVzLmRhdGEoJ2JzLmNvbGxhcHNlJyk7XG4gICAgICBpZiAoaGFzRGF0YSAmJiBoYXNEYXRhLnRyYW5zaXRpb25pbmcpIHJldHVybjtcbiAgICAgIFBsdWdpbi5jYWxsKGFjdGl2ZXMsICdoaWRlJyk7XG4gICAgICAvLyBoYXNEYXRhIHx8IGFjdGl2ZXMuZGF0YSgnYnMuY29sbGFwc2UnLCBudWxsKVxuICAgIH1cblxuICAgIHZhciBkaW1lbnNpb24gPSB0aGlzLmRpbWVuc2lvbigpO1xuXG4gICAgdGhpcy4kZWxlbWVudFxuICAgICAgLnJlbW92ZUNsYXNzKCdjb2xsYXBzZScpXG4gICAgICAuYWRkQ2xhc3MoJ2NvbGxhcHNpbmcnKVtkaW1lbnNpb25dKDApO1xuXG4gICAgdGhpcy50cmFuc2l0aW9uaW5nID0gMTtcblxuICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy4kZWxlbWVudFxuICAgICAgICAucmVtb3ZlQ2xhc3MoJ2NvbGxhcHNpbmcnKVxuICAgICAgICAuYWRkQ2xhc3MoJ2NvbGxhcHNlIGluJylbZGltZW5zaW9uXSgnJyk7XG4gICAgICB0aGlzLnRyYW5zaXRpb25pbmcgPSAwO1xuICAgICAgdGhpcy4kZWxlbWVudFxuICAgICAgICAudHJpZ2dlcignc2hvd24uYnMuY29sbGFwc2UnKTtcbiAgICB9O1xuXG4gICAgaWYgKCEkLnN1cHBvcnQudHJhbnNpdGlvbikgcmV0dXJuIGNvbXBsZXRlLmNhbGwodGhpcyk7XG5cbiAgICB2YXIgc2Nyb2xsU2l6ZSA9ICQuY2FtZWxDYXNlKFsnc2Nyb2xsJywgZGltZW5zaW9uXS5qb2luKCctJykpO1xuXG4gICAgdGhpcy4kZWxlbWVudFxuICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgJC5wcm94eShjb21wbGV0ZSwgdGhpcykpXG4gICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoMzUwKVtkaW1lbnNpb25dKHRoaXMuJGVsZW1lbnRbMF1bc2Nyb2xsU2l6ZV0pO1xuICB9O1xuXG4gIENvbGxhcHNlLnByb3RvdHlwZS5oaWRlID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMudHJhbnNpdGlvbmluZyB8fCAhdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaW4nKSkgcmV0dXJuO1xuXG4gICAgdmFyIHN0YXJ0RXZlbnQgPSAkLkV2ZW50KCdoaWRlLmJzLmNvbGxhcHNlJyk7XG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKHN0YXJ0RXZlbnQpO1xuICAgIGlmIChzdGFydEV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm47XG5cbiAgICB2YXIgZGltZW5zaW9uID0gdGhpcy5kaW1lbnNpb24oKTtcblxuICAgIHRoaXMuJGVsZW1lbnRbZGltZW5zaW9uXSh0aGlzLiRlbGVtZW50W2RpbWVuc2lvbl0oKSlbMF0ub2Zmc2V0SGVpZ2h0XG5cbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICAuYWRkQ2xhc3MoJ2NvbGxhcHNpbmcnKVxuICAgICAgLnJlbW92ZUNsYXNzKCdjb2xsYXBzZScpXG4gICAgICAucmVtb3ZlQ2xhc3MoJ2luJyk7XG5cbiAgICB0aGlzLnRyYW5zaXRpb25pbmcgPSAxO1xuXG4gICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnRyYW5zaXRpb25pbmcgPSAwO1xuICAgICAgdGhpcy4kZWxlbWVudFxuICAgICAgICAudHJpZ2dlcignaGlkZGVuLmJzLmNvbGxhcHNlJylcbiAgICAgICAgLnJlbW92ZUNsYXNzKCdjb2xsYXBzaW5nJylcbiAgICAgICAgLmFkZENsYXNzKCdjb2xsYXBzZScpO1xuICAgIH07XG5cbiAgICBpZiAoISQuc3VwcG9ydC50cmFuc2l0aW9uKSByZXR1cm4gY29tcGxldGUuY2FsbCh0aGlzKTtcblxuICAgIHRoaXMuJGVsZW1lbnRbZGltZW5zaW9uXSgwKVxuICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgJC5wcm94eShjb21wbGV0ZSwgdGhpcykpXG4gICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoMzUwKTtcbiAgfTtcblxuICBDb2xsYXBzZS5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpc1t0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdpbicpID8gJ2hpZGUnIDogJ3Nob3cnXSgpO1xuICB9O1xuXG5cbiAgLy8gQ09MTEFQU0UgUExVR0lOIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIHZhciAkdGhpcyA9ICQodGhpcyk7XG4gICAgICB2YXIgZGF0YSA9ICR0aGlzLmRhdGEoJ2JzLmNvbGxhcHNlJyk7XG4gICAgICB2YXIgb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBDb2xsYXBzZS5ERUZBVUxUUywgJHRoaXMuZGF0YSgpLCB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvbik7XG5cbiAgICAgIGlmICghZGF0YSAmJiBvcHRpb25zLnRvZ2dsZSAmJiBvcHRpb24gPT0gJ3Nob3cnKSBvcHRpb24gPSAhb3B0aW9uO1xuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5jb2xsYXBzZScsIChkYXRhID0gbmV3IENvbGxhcHNlKHRoaXMsIG9wdGlvbnMpKSk7XG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKCk7XG4gICAgfSk7XG4gIH1cbiAgdmFyIG9sZCA9ICQuZm4uY29sbGFwc2U7XG5cbiAgJC5mbi5jb2xsYXBzZSA9IFBsdWdpbjtcbiAgJC5mbi5jb2xsYXBzZS5Db25zdHJ1Y3RvciA9IENvbGxhcHNlO1xuXG5cbiAgLy8gQ09MTEFQU0UgTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09PT09PT1cblxuICAkLmZuLmNvbGxhcHNlLm5vQ29uZmxpY3QgPSBmdW5jdGlvbigpIHtcbiAgICAkLmZuLmNvbGxhcHNlID0gb2xkO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG5cbiAgLy8gQ09MTEFQU0UgREFUQS1BUElcbiAgLy8gPT09PT09PT09PT09PT09PT1cblxuICAkKGRvY3VtZW50KS5vbignY2xpY2suYnMuY29sbGFwc2UuZGF0YS1hcGknLCAnW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl0nLCBmdW5jdGlvbihlKSB7XG4gICAgdmFyIGhyZWY7XG4gICAgdmFyICR0aGlzID0gJCh0aGlzKTtcbiAgICB2YXIgdGFyZ2V0ID0gJHRoaXMuYXR0cignZGF0YS10YXJnZXQnKSB8fCBlLnByZXZlbnREZWZhdWx0KCkgfHwgKGhyZWYgPSAkdGhpcy5hdHRyKCdocmVmJykpICYmIGhyZWYucmVwbGFjZSgvLiooPz0jW15cXHNdKyQpLywgJycpOyAvLyBzdHJpcCBmb3IgaWU3XG4gICAgdmFyICR0YXJnZXQgPSAkKHRhcmdldCk7XG4gICAgdmFyIGRhdGEgPSAkdGFyZ2V0LmRhdGEoJ2JzLmNvbGxhcHNlJyk7XG4gICAgdmFyIG9wdGlvbiA9IGRhdGEgPyAndG9nZ2xlJyA6ICR0aGlzLmRhdGEoKTtcbiAgICB2YXIgcGFyZW50ID0gJHRoaXMuYXR0cignZGF0YS1wYXJlbnQnKTtcbiAgICB2YXIgJHBhcmVudCA9IHBhcmVudCAmJiAkKHBhcmVudCk7XG5cbiAgICBpZiAoIWRhdGEgfHwgIWRhdGEudHJhbnNpdGlvbmluZykge1xuICAgICAgaWYgKCRwYXJlbnQpICRwYXJlbnQuZmluZCgnW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl1bZGF0YS1wYXJlbnQ9XCInICsgcGFyZW50ICsgJ1wiXScpLm5vdCgkdGhpcykuYWRkQ2xhc3MoJ2NvbGxhcHNlZCcpO1xuICAgICAgJHRoaXNbJHRhcmdldC5oYXNDbGFzcygnaW4nKSA/ICdhZGRDbGFzcycgOiAncmVtb3ZlQ2xhc3MnXSgnY29sbGFwc2VkJyk7XG4gICAgfVxuXG4gICAgUGx1Z2luLmNhbGwoJHRhcmdldCwgb3B0aW9uKTtcbiAgfSk7XG5cbiAgLy9UQUJTXG4gICQoZnVuY3Rpb24oKSB7XG4gICAgLy8gc2V0IGFjdGl2ZSByYWRpbyB0byBhZGRyZXNzIGJhclxuICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcudGFicyAudGFicy1uYXYgbGFiZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBoYXNoID0gJyMnICsgJCh0aGlzKS5hdHRyKCdmb3InKTtcbiAgICAgIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSgnJywgJycsIGhhc2gpO1xuICAgIH0pO1xuICAgIC8vIHNlbGVjdCBhY3RpdmUgcmFkaW8gYmFzZWQgb24gaGFzaFxuICAgICQoZG9jdW1lbnQubG9jYXRpb24uaGFzaCkucHJvcCgnY2hlY2tlZCcsIHRydWUpO1xuICB9KTtcbn0pO1xuXG4vLyBQb2JpZXJhbmllIG5pY2vDs3cgeiB1cmwgaSB3ecWbd2lldGxhbmllIGljaCBrb8WCbyBpa29uIHNwb8WCZWN6bm/Fm2Npb3d5Y2hcbi8vIG9yYXogd3lrb3J6eXN0YW5pZSB1c2VybmFtZSd1IGdpdGh1YmEgZG8gd3nFm3dpZXRsZW5pYSBvc3RhdG5pZSBha3R5d25vxZtjaVxualF1ZXJ5KGZ1bmN0aW9uKCQpIHtcbiAgJCgnLnVzZXJpbmZvIGEnKS5lYWNoKGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgdmFyIHByb2ZpbGUgPSAkKHRoaXMpLmF0dHIoJ2hyZWYnKTtcbiAgICB2YXIgZ2l0aCA9IHByb2ZpbGUuc3Vic3RyKDE5KTtcbiAgICBpZiAocHJvZmlsZS5pbmRleE9mKCdnaXRodWInKSA+IC0xKSB7XG4gICAgICAkKCdhW2dpdGh1Yl0nKS5hcHBlbmQoZ2l0aCk7XG4gICAgICBHaXRodWIub25seXVzZXJBY3Rpdml0eSh7XG4gICAgICAgIHVzZXJuYW1lOiBnaXRoLFxuICAgICAgICBzZWxlY3RvcjogXCIuZ2l0aHViXCIsXG4gICAgICAgIGxpbWl0OiAxMFxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChwcm9maWxlLmluZGV4T2YoJ3R3aXR0ZXInKSA+IC0xKSB7XG4gICAgICAkKCdhW3R3aXR0ZXJdJykuYXBwZW5kKHByb2ZpbGUuc3Vic3RyKDIwKSk7XG4gICAgfVxuICAgIGlmIChwcm9maWxlLmluZGV4T2YoJ2ZhY2UnKSA+IC0xKSB7XG4gICAgICAkKCdhW2ZhY2VdJykuYXBwZW5kKHByb2ZpbGUuc3Vic3RyKDI1KSk7XG4gICAgfVxuICB9KTtcblxufSk7XG5cbmpRdWVyeShcIi5leGNlcnB0XCIpLnRleHQoZnVuY3Rpb24oaW5kZXgsIGN1cnJlbnRUZXh0KSB7XG4gIHJldHVybiBjdXJyZW50VGV4dC5zdWJzdHIoMCwgMTUwKSArICcuLi4nO1xufSk7XG5cbi8vU2tyYWNhIGltaW9uYSwgYnkgbmllIHd5Y2hvZHppxYJ5IHphIGJsb2tpXG5qUXVlcnkoZnVuY3Rpb24oJCkge1xuICAkKCcuY28tYXV0aG9yIGgzIGEnKS5lYWNoKGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgdmFyIGxlbmd0aCA9ICQodGhpcykuaHRtbCgpLmxlbmd0aDtcbiAgICBpZiAobGVuZ3RoID4gMTMpIHtcbiAgICAgIHZhciBuYW1lID0gJCh0aGlzKS50ZXh0KCk7XG4gICAgICAvLyBjb25zb2xlLmxvZyhuYW1lKTtcbiAgICAgIHZhciB0cmltbWVkX25hbWUgPSBuYW1lLmNoYXJBdCgwKSArIFwiLiBcIiArIG5hbWUuc3Vic3RyKG5hbWUuaW5kZXhPZignICcpICsgMSk7XG4gICAgICAvLyBjb25zb2xlLmxvZyh0cmltbWVkX25hbWUpO1xuICAgICAgJCh0aGlzKS50ZXh0KHRyaW1tZWRfbmFtZSk7XG4gICAgfVxuICB9KTtcbn0pO1xuLy8gUGFrdWplIG1uaWVqc3plIG9icmF6a2kgYmV6IHBvZHBpc3UgdyA8ZmlndXJlPiAvL1xualF1ZXJ5KGZ1bmN0aW9uKCQpIHtcbiAgJCgnLnByb2plY3QtY29udGVudCBwJykuZWFjaChmdW5jdGlvbihpbmRleCkge1xuICAgIHZhciBzb21lX2ltZyA9ICQodGhpcykuZmluZCgnaW1nJyk7XG4gICAgdmFyIHdpZHRoID0gc29tZV9pbWcuaHQoKTtcbiAgICBpZiAod2lkdGggPCA5ODApIHtcbiAgICAgIHNvbWVfaW1nLndyYXAoXCI8ZmlndXJlPjwvZmlndXJlPlwiKTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbi8vIERyb3Bkb3duIGRvd25sb2FkIGJ1dHRvbiAvL1xuXG4vLyBodHRwOi8vY29kZXBlbi5pby9qYWtlc3R1dHMvcGVuL25FRnl3XG5qUXVlcnkoZnVuY3Rpb24oJCkge1xuXG4gICQoXCIjZHJvcGRvd24gYnV0dG9uXCIpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKFwib3BlblwiKSkge1xuICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcyhcIm9wZW5cIik7XG4gICAgICAkKHRoaXMpLnNpYmxpbmdzKFwidWxcIikuc2xpZGVVcChcImZhc3RcIik7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgJCh0aGlzKS5hZGRDbGFzcyhcIm9wZW5cIik7XG4gICAgICAkKHRoaXMpLnNpYmxpbmdzKFwidWxcIikuc2xpZGVEb3duKFwiZmFzdFwiKTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbi8vIFByZXplcyB6YXdzemUgbmEgcGllcndzenltIG1pZWpzY3UgLy9cbi8vIFBvendhbGFqxIUgb3R3aWVyYcSHIGJhbmVyIHR5bGtvIHByenkgcGllcndzemVqIHdpenljaWVcbi8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjQwNzA2MjcvY3JlYXRlLWRyb3Bkb3duLWJhbm5lci13aGVuLXVzZXItZmlyc3QtdmlzaXRzLXdlYnNpdGVcbmpRdWVyeShmdW5jdGlvbigkKSB7XG4gICQoJyNtYW5hZ2VtZW50X2JvYXJkIGxpI2FkbWluJykuaW5zZXJ0QmVmb3JlKCcjbWFuYWdlbWVudF9ib2FyZCBsaTplcSgwKScpO1xufSk7XG4vLyBDaWFzdGthIGRsYSBiYW5lcmEgLy9cbmpRdWVyeSh3aW5kb3cpLmxvYWQoZnVuY3Rpb24oKSB7XG4gIC8vIENoZWNrIGlmIGNvb2tpZVxuICBpZiAoQ29va2llcy5nZXQoJ3N5bmVyZ2lhX3JlY3J1aXRtZW50X2Jhbm5lcicpICE9PSBcImNsb3NlZFwiKSB7XG4gICAgalF1ZXJ5KFwiI21vZGFsXCIpLnByb3AoJ2NoZWNrZWQnLCB0cnVlKTtcbiAgfVxuICAvLyBPbiBidXR0b24gY2xpY2sgY2xvc2UgYW5kIGFkZCBjb29raWUgKGV4cGlyZXMgaW4gMTAwIGRheXMpXG4gIGpRdWVyeSgnI2Nsb3NlX2Jhbm5lcicpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAgIENvb2tpZXMuc2V0KCdzeW5lcmdpYV9yZWNydWl0bWVudF9iYW5uZXInLCAnY2xvc2VkJywge1xuICAgICAgZXhwaXJlczogMTAwLFxuICAgICAgcGF0aDogJydcbiAgICB9KTtcbiAgICAvLyBqUXVlcnkoXCIjbW9kYWxcIikucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcbiAgfSk7XG59KTtcbmpRdWVyeShmdW5jdGlvbigkKSB7XG4gICQoJ2xhYmVsW2FtLWJ1dHRvbl0nKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAkKCcuZmInKS5hZGRDbGFzcygnYW5pbWF0ZWQgZmFkZUluVXAnKTtcbiAgICAkKCcuZGF0ZSAuaWNvbi1jb250YWluZXInKS5hZGRDbGFzcygnYW5pbWF0ZWQgc2xpZGVJbkxlZnQnKTtcbiAgICAkKCcuZGF0ZSBzcGFuJykuYWRkQ2xhc3MoJ2FuaW1hdGVkIHNsaWRlSW5MZWZ0Jyk7XG4gICAgJCgnLmxvY2F0aW9uIC5pY29uLWNvbnRhaW5lcicpLmFkZENsYXNzKCdhbmltYXRlZCBzbGlkZUluUmlnaHQnKTtcbiAgICAkKCcubG9jYXRpb24gc3BhbicpLmFkZENsYXNzKCdhbmltYXRlZCBzbGlkZUluUmlnaHQnKTtcblxuICB9KTtcbiAgJCgnI2Nsb3NlX2Jhbm5lcicpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAgICQoJy5mYicpLnJlbW92ZUNsYXNzKCdhbmltYXRlZCBmYWRlSW5VcCcpO1xuICAgICQoJy5kYXRlIC5pY29uLWNvbnRhaW5lcicpLnJlbW92ZUNsYXNzKCdhbmltYXRlZCBzbGlkZUluTGVmdCcpO1xuICAgICQoJy5kYXRlIHNwYW4nKS5yZW1vdmVDbGFzcygnYW5pbWF0ZWQgc2xpZGVJbkxlZnQnKTtcbiAgICAkKCcubG9jYXRpb24gLmljb24tY29udGFpbmVyJykucmVtb3ZlQ2xhc3MoJ2FuaW1hdGVkIHNsaWRlSW5SaWdodCcpO1xuICAgICQoJy5sb2NhdGlvbiBzcGFuJykucmVtb3ZlQ2xhc3MoJ2FuaW1hdGVkIHNsaWRlSW5SaWdodCcpO1xuICB9KTtcbn0pO1xualF1ZXJ5KGZ1bmN0aW9uKCQpIHtcbiAgJChcIi5ub3RlLWNsb3NlXCIpLmNsaWNrKGZ1bmN0aW9uKCkge1xuICAgICQodGhpcykucGFyZW50KClcbiAgICAgIC5hbmltYXRlKHtcbiAgICAgICAgb3BhY2l0eTogMFxuICAgICAgfSwgMjUwLCBmdW5jdGlvbigpIHtcbiAgICAgICAgJCh0aGlzKVxuICAgICAgICAgIC5hbmltYXRlKHtcbiAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogMFxuICAgICAgICAgIH0sIDI1MClcbiAgICAgICAgICAuY2hpbGRyZW4oKVxuICAgICAgICAgIC5hbmltYXRlKHtcbiAgICAgICAgICAgIHBhZGRpbmc6IDBcbiAgICAgICAgICB9LCAyNTApXG4gICAgICAgICAgLndyYXBJbm5lcihcIjxkaXYgLz5cIilcbiAgICAgICAgICAuY2hpbGRyZW4oKVxuICAgICAgICAgIC5zbGlkZVVwKDI1MCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkKHRoaXMpLmNsb3Nlc3QoXCIubm90ZVwiKS5yZW1vdmUoKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sImZpbGUiOiJtYWluLm1pbi5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
