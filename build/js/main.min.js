// main.js //
// Wszystko wrzucamy tu

(function($) {
  'use strict';

  var _destroyFn;

  $.scrollupbar = function($bar, options) {
    // Default options
    options = $.extend({
      enterViewport: $.noop,
      fullyEnterViewport: $.noop,
      exitViewport: $.noop,
      partiallyExitViewport: $.noop
    }, options);

    function isFullyInViewport() {
      return $window.scrollTop() <= $bar.offset().top;
    }

    function isInViewport() {
      return $window.scrollTop() < $bar.offset().top + $bar.outerHeight();
    }

    var $window = $(window),
        $document = $(document),
        minY = $bar.css('position') == 'fixed' ? 0 : $bar.offset().top,
        lastY = $window.scrollTop(), // Use last Y to detect scroll direction.
        initialPosTop = $bar.position().top,
        iOS = /(iPad|iPhone|iPod)/g.test(navigator.userAgent),
        timeout;

    $.scrollupbar.isInViewport = isInViewport();
    $.scrollupbar.isFullyInViewport = isFullyInViewport();

    // iOS can't handle momentum scroll properly (See discussion on
    // http://stackoverflow.com/questions/2863547).
    if (!iOS) {
      $window.on('scroll.scrollupbar', function() {
        var y = $window.scrollTop(),
            barHeight = $bar.outerHeight();

        // Ignore elastic scrolling.
        if (y < 0 || y > ($document.height() - $window.height())) {
          return;
        }

        // Cancel the event fired by the previous scroll.
        if (timeout) {
          clearTimeout(timeout);
        }

        if (y < lastY) { // Scrolling up
          // If the bar is hidden, place it right above the top frame.
          if (!$.scrollupbar.isInViewport && lastY - barHeight >= minY) {
            $bar.css('top', lastY - barHeight);
            $.scrollupbar.isInViewport = true;
            options.enterViewport();
          }

          // Scrolls up bigger than the bar's height fixes the bar on top.
          if (isFullyInViewport()) {
            if (y >= minY) {
              $bar.css({
                'position': 'fixed',
                'top': 0
              });
            } else {
              $bar.css({
                'position': 'absolute',
                'top': initialPosTop
              });
            }

            if (!$.scrollupbar.isFullyInViewport) {
              $.scrollupbar.isFullyInViewport = true;
              options.fullyEnterViewport();
            }
          }

          // Fire an event to reveal the entire bar after 400ms if the scroll
          // wasn't big enough.
          timeout = setTimeout(function() {
            if (!isFullyInViewport()) {
              $bar.css({
                'position': 'fixed',
                'top': $bar.offset().top - y
              });

              $bar.animate({'top': 0}, 100, function() {
                $.scrollupbar.isFullyInViewport = true;
                options.fullyEnterViewport();
              });
            }
          }, 400);
        } else if (y > lastY) { // Scrolling down
          // Unfix the bar allowing it to scroll with the page.
          if ($.scrollupbar.isFullyInViewport) {
            $bar.css({
              'position': 'absolute',
              'top': lastY > minY ? lastY : initialPosTop
            });

            if (!isFullyInViewport()) {
              $.scrollupbar.isFullyInViewport = false;
              options.partiallyExitViewport();
            }
          }

          if ($.scrollupbar.isInViewport && !isInViewport()) {
            $.scrollupbar.isInViewport = false;
            options.exitViewport();
          }

          // Fire an event to hide the entire bar after 400ms if the scroll
          // wasn't big enough.
          timeout = setTimeout(function() {
            if (isInViewport() && y - barHeight >= minY) {
              $bar.animate({'top': y - barHeight}, 100, function() {
                $.scrollupbar.isInViewport = false;
                options.exitViewport();
              });
            }
          }, 400);
        }

        lastY = y;
      });
    } else { // Fallback simplified behaviour for iOS.
      $window.on('touchstart.scrollupbar', function () {
        lastY = $window.scrollTop();
      });

      $window.on('touchend.scrollupbar', function () {
        var y = $window.scrollTop();

        if (y < lastY || y - $bar.outerHeight() < minY) { // Scrolling up
          if (y <= minY) {
            // Restore original position.
            $bar.css({
              'position': 'absolute',
              'top': initialPosTop
            });

            $bar.show(function() {
              $.scrollupbar.isInViewport = true;
              $.scrollupbar.isFullyInViewport = true;
              options.enterViewport();
              options.fullyEnterViewport();
            });
          } else {
            $bar.css({
              'position': 'fixed',
              'top': 0
            });

            $.scrollupbar.isInViewport = true;
            options.enterViewport();

            $bar.slideDown(function() {
              $.scrollupbar.isFullyInViewport = true;
              options.fullyEnterViewport();
            });
          }
        } else if (y > lastY) { // Scrolling down
          $.scrollupbar.isFullyInViewport = false;
          options.partiallyExitViewport();

          $bar.slideUp(function() {
            $.scrollupbar.isInViewport = false;
            options.exitViewport();
          });
        }

        lastY = y;
      });
    }

    _destroyFn = function() {
      // Unbind all listeners added by scrollupbar plugin
      $window.off('.scrollupbar');

      // Restore original bar position.
      $bar.css({
        'position': 'absolute',
        'top': initialPosTop
      });
    };

    return $bar;
  };

  $.scrollupbar.destroy = function() {
    if (_destroyFn) {
      return _destroyFn();
    }
  };

  $.fn.scrollupbar = function(options) {
    return $.scrollupbar(this, options);
  };
})(jQuery);

(function($){

    /**
     * Copyright 2012, Digital Fusion
     * Licensed under the MIT license.
     * http://teamdf.com/jquery-plugins/license/
     *
     * @author Sam Sehnert
     * @desc A small plugin that checks whether elements are within
     *       the user visible viewport of a web browser.
     *       only accounts for vertical position, not horizontal.
     */
    var $w = $(window);
    $.fn.visible = function(partial,hidden,direction){

        if (this.length < 1)
            return;

        var $t        = this.length > 1 ? this.eq(0) : this,
            t         = $t.get(0),
            vpWidth   = $w.width(),
            vpHeight  = $w.height(),
            direction = (direction) ? direction : 'both',
            clientSize = hidden === true ? t.offsetWidth * t.offsetHeight : true;

        if (typeof t.getBoundingClientRect === 'function'){

            // Use this native browser method, if available.
            var rec = t.getBoundingClientRect(),
                tViz = rec.top    >= 0 && rec.top    <  vpHeight,
                bViz = rec.bottom >  0 && rec.bottom <= vpHeight,
                lViz = rec.left   >= 0 && rec.left   <  vpWidth,
                rViz = rec.right  >  0 && rec.right  <= vpWidth,
                vVisible   = partial ? tViz || bViz : tViz && bViz,
                hVisible   = partial ? lViz || rViz : lViz && rViz;

            if(direction === 'both')
                return clientSize && vVisible && hVisible;
            else if(direction === 'vertical')
                return clientSize && vVisible;
            else if(direction === 'horizontal')
                return clientSize && hVisible;
        } else {

            var viewTop         = $w.scrollTop(),
                viewBottom      = viewTop + vpHeight,
                viewLeft        = $w.scrollLeft(),
                viewRight       = viewLeft + vpWidth,
                offset          = $t.offset(),
                _top            = offset.top,
                _bottom         = _top + $t.height(),
                _left           = offset.left,
                _right          = _left + $t.width(),
                compareTop      = partial === true ? _bottom : _top,
                compareBottom   = partial === true ? _top : _bottom,
                compareLeft     = partial === true ? _right : _left,
                compareRight    = partial === true ? _left : _right;

            if(direction === 'both')
                return !!clientSize && ((compareBottom <= viewBottom) && (compareTop >= viewTop)) && ((compareRight <= viewRight) && (compareLeft >= viewLeft));
            else if(direction === 'vertical')
                return !!clientSize && ((compareBottom <= viewBottom) && (compareTop >= viewTop));
            else if(direction === 'horizontal')
                return !!clientSize && ((compareRight <= viewRight) && (compareLeft >= viewLeft));
        }
    };

})(jQuery);

jQuery(function($) {

  /**
   * Dropy
   * http://codepen.io/Tombek/pen/OPvpLe
   */
  var dropy = {
    $dropys: null,
    openClass: 'open',
    selectClass: 'selected',
    init: function(){
      var self = this;
  
      self.$dropys = $('.dropy');
      self.eventHandler();
    },
    eventHandler: function(){
      var self = this;
  
      // Opening a dropy
      self.$dropys.find('.dropy__title').click(function(){
        self.$dropys.removeClass(self.openClass);
        $(this).parents('.dropy').addClass(self.openClass);
      });
  
      // Click on a dropy list
      self.$dropys.find('.dropy__content ul li a').click(function(){
        var $that = $(this);
        var $dropy = $that.parents('.dropy');
        var $input = $dropy.find('input');
        var $title = $(this).parents('.dropy').find('.dropy__title span');
  
        // Remove selected class
        $dropy.find('.dropy__content a').each(function(){
          $(this).removeClass(self.selectClass);
        });
  
        // Update selected value
        $title.html($that.html());
        $input.val($that.attr('data-value')).trigger('change');
  
        // If back to default, remove selected class else addclass on right element
        if($that.hasClass('dropy__header')){
          $title.removeClass(self.selectClass);
          $title.html($title.attr('data-title'));
        }
        else{
          $title.addClass(self.selectClass);
          $that.addClass(self.selectClass);
        }
  
        // Close dropdown
        $dropy.removeClass(self.openClass);
      });
  
      // Close all dropdown onclick on another element
      $(document).bind('click', function(e){
          if (! $(e.target).parents().hasClass('dropy')){ self.$dropys.removeClass(self.openClass); }
      });
    }
  };
  
  $(function(){
    dropy.init();
  });

     function cardExcerpt() {
      $(".card__excerpt").text(function(index, currentText) {
        return currentText.substr(0, 140) + '\u2026';
      });
    }
    cardExcerpt();

  // Pakuje mniejsze obrazki bez podpisu w <figure> //
  // Jeśli obrazek ma tytuł, tym się zajmuje php funkcja w project-functions.php
  $('.project__content p').each(function(index) {
    var some_img = $(this).find('img');
    var width = some_img.width();
    if (width < 980) {
      some_img.wrap("<figure></figure>");
    }
  });

  //Skraca imiona, by nie wychodziły za bloki
  $('.membercard__name a').each(function(index) {
    var length = $(this).html().length;
    if (length > 17) {
      var name = $(this).text();
      $(this).parent().addClass('membercard__name--tooLong');
      // console.log(name);
      var trimmed_name = name.charAt(0) + ". " + name.substr(name.indexOf(' ') + 1);
      // console.log(trimmed_name);
      $(this).text(trimmed_name);
    }
  });
  
  $('.membercardSmall__name a').each(function(index) {
    var length = $(this).html().length;
    if (length > 14) {
      var name = $(this).text();
      // console.log(name);
      var trimmed_name = name.charAt(0) + ". " + name.substr(name.indexOf(' ') + 1);
      // console.log(trimmed_name);
      $(this).text(trimmed_name);
    }
  });

  // Notyfikacje, powiadomienia //
  $(".note-close").click(function() {
    $(this).parent()
      .animate({
        opacity: 0
      }, 250, function() {
        $(this)
          .animate({
            marginBottom: 0
          }, 250)
          .children()
          .animate({
            padding: 0
          }, 250)
          .wrapInner("<div />")
          .children()
          .slideUp(250, function() {
            $(this).closest(".note").remove();
          });
      });
  });

  // Animacje dla banera rekrutacji //
  $('label.button').on('click', function() {
    $('.fb').addClass('animated fadeInUp');
    $('.date .icon-container').addClass('animated slideInLeft');
    $('.date span').addClass('animated slideInLeft');
    $('.location .icon-container').addClass('animated slideInRight');
    $('.location span').addClass('animated slideInRight');
  
  });
  $('#close_banner').on('click', function() {
    $('.fb').removeClass('animated fadeInUp');
    $('.date .icon-container').removeClass('animated slideInLeft');
    $('.date span').removeClass('animated slideInLeft');
    $('.location .icon-container').removeClass('animated slideInRight');
    $('.location span').removeClass('animated slideInRight');
  });
  
  // http://stackoverflow.com/questions/24070627/create-dropdown-banner-when-user-first-visits-website
  // Pozwalają otwierać baner tylko przy pierwszej wizycie
  
  // cookie-js

  //// = partials/show-nicknames.js

  $(document).ready(function(){
      // $("#nav-mobile").html($("#nav-main").html());
      $("#nav-trigger .navicon-button").click(function(){
        console.info('Burger clicked');
          if ($("#nav ul").hasClass("nav__menu--expanded")) {
              $("#nav ul").removeClass("nav__menu--expanded").slideUp(250);
              $(this).removeClass("open");
          } else {
              $("#nav ul").addClass("nav__menu--expanded").slideDown(250);
              $(this).addClass("open");
          }
      });
  });

  $(document).ready(function() {
    Slider = $('#slider').Swipe({
      auto: 0,
      continuous: true,
    }).data('Swipe');
    if (Slider) {
      $('.next').on('click', Slider.next);
      $('.prev').on('click', Slider.prev);
    }
  });

  // przez to gnwo nie działa .on()
  ////= partials/smooth-scrolling.js

  

  (function() {
      // Żeby tooltip nie klikał
      $('.tooltip').on('click', function(e) {
          e.preventDefault();
      });
  
      $('[data-github]').hover(function(e) {
          loadGithub();
          $(this).children('.tooltip').addClass('tooltip--active');
      }, function(e) {
          $(this).children('.tooltip').removeClass('tooltip--active');
      });
  
      $('[data-lastfm]').hover(function(e) {
          loadLastfm();
          $(this).children('.tooltip').addClass('tooltip--active');
      }, function(e) {
          $(this).children('.tooltip').removeClass('tooltip--active');
      });
  })();

  function loadGithub() {
      // Pobiera url z hrefa
      var profileUrl = $('a[data-github]').attr('href');
      // Odpowiednio obcina go do username
      var username = profileUrl.substr(19);
      // Dodaje username do url zapytania
      var requri = 'https://api.github.com/users/' + username;
      // Sprawdza, czy tooltip pusty, by nie generować nowych zapytań
      // i nie dodawać po raz kolejny dane do tooltipa
      if ($('[data-github] .tooltip').is(':empty')) {
          requestJSON(requri, function(json) {
              if (json.message === "Nie znaleziono" || username === '') {
                  $('[data-github] .tooltip').html("<h2>Brak informacji</h2>");
              } else {
                  username = json.login;
                  var profileurl = json.html_url;
                  var reposnum = json.public_repos;
                  var aviurl = json.avatar_url;
  
  
                  var outhtml = '<div class="gh">' +
                      '<h4 class="gh__name"><a class="link" href="' + profileurl + '"><img class="gh__avatar" src="' + aviurl + '">@' + username + '</a></h4>';
                  outhtml = outhtml + '<span class="gh__repos">Repozytoriów: ' + reposnum + '</span><hr/></div>';
                  $('[data-github] .tooltip').append(outhtml);
  
              } // end else statement
          }); // end requestJSON Ajax call
      }
  
      function requestJSON(url, callback) {
          $.ajax({
              url: url,
              complete: function(xhr) {
                  callback.call(null, xhr.responseJSON);
              }
          });
      }
  }

  function loadLastfm() {
      // Pobiera url z hrefa
      var profileUrl = $('a[data-lastfm]').attr('href');
      // Odpowiednio obcina go do username
      var username = profileUrl.substr(27);
      var baseUrl = 'http://ws.audioscrobbler.com/2.0/?method=user.getrecenttracks';
      var api_key = '299020c062c481f083ecd0276c315e3a';
  
      var requestUrl = baseUrl + '&user=' + username + '&api_key=' + api_key + '&format=json';
      console.log(username);
      if ($('[data-lastfm] .tooltip').is(':empty')) {
          $.getJSON(requestUrl, function(data) {
              var artist = data.recenttracks.track[0].artist["#text"];
              var song = data.recenttracks.track[0]["name"];
              var cover = data.recenttracks.track[0].image[3]["#text"];
              if (cover === "") {
                  cover = "http://img2-ak.lst.fm/i/u/174s/4128a6eb29f94943c9d206c08e625904.png";
              }
              var outhtml = '<div class="lf"><img class="lf__cover" src="' + cover + '"/><div class="lf__trackInfo"><span class="lf__artist">' + artist + '</span><span class="lf__song">' + song + '</span></div></div>';
              $('[data-lastfm] .tooltip').append(outhtml);
          });
      }
  }

  $(document).ready(function() {
      var bLazy = new Blazy({
        offset: 20,
        selector: '.blazy',
        loadInvisible: false,
        breakpoints: [{
          width: 360, // Max-width
          src: 'data-src-small'
        }],
        success: function(element) {
          $(element).parent().removeClass('loading', 500);
          updateCounter();
        },
        error: function(element, msg) {
          if (msg === 'missing') {
            $(element).parent().removeClass('loading', 500); // Data-src is missing
            console.error("bLazy: data-src is missing");
          } else if (msg === 'invalid') {
            $(element).parent().removeClass('loading', 500);
            // Data-src is invalid
            console.error("bLazy: data-src is invalid");
    
          }
        }
      });
      // not needed, only here to illustrate amount of loaded images
      var imageLoaded = 0;
    
      function updateCounter() {
        imageLoaded++;
        console.info("bLazy: Images loaded: %d", imageLoaded);
      }
    
      // tabs(bLazy);

    ////= member.js

    ////= partials/infinite-scroll.js

    (function() {
        var ajax_url = $('.global').attr('data-ajax-url');
        var post_offset = 0;
        var incNumber = 6; // ilość postów do załadowania
    
        var projects = (function(setProjects) {
            var loaded;
            var total;
            return {
                incLoaded: function() {
                    loaded = loaded + incNumber;
                },
                getLoaded: function() {
                    return loaded;
                },
                setLoaded: function(setProjects) {
                    loaded = setProjects;
                },
                setTotal: function(setProjects) {
                    total = setProjects;
                },
                getTotal: function() {
                    return total;
                }
            };
        })();
        var loadingButton = (function(button){
            return {
                showSpinner: function(button) {
                    button.html('<div class="spinner"></div>');
                },
                showCaption: function(button) {
                    button.html('Zobacz starsze');
                },
                hide: function(button) {
                    button.hide();
                }
            };
        })();
    
        $('#load_more_posts').on('click', loadMore);
        $('#load_more').on('click', loadProjects);
    
        function loadMore() {
            console.log('Clicked load_more');
            $(this).html('<div class="spinner"></div>');
            post_offset = parseInt(post_offset) + 6;
            $.ajax({
                url: ajax_url,
                type: 'POST',
                data: {
                    action: 'load_posts',
                    post_offset: post_offset,
                },
                success: function(data) {
                    $('#load_more_posts').html('Zobacz starsze');
                    $('#posts .cardsWrapper').append(data);
                    console.info('Ajax: OK');
                    bLazy.revalidate();
                    cardExcerpt();
                }
            });
        }
    
        function loadProjects() {
            var thisParent = $(this).parent();
            // ustawia całkowitą liczbę danych projektów
            projects.setTotal(thisParent.attr('data-total'));
            // jeśli jeszcze nie pobierano ajaxem projektów, to ustawia wartość
            // równą już wyświetlonych
            if (!projects.getLoaded()) {
                projects.setLoaded(thisParent.find('.card').length);
                console.log('Already:', projects.getLoaded());
            }
            var projects_status = thisParent.attr('data-projects-status');
            post_offset = parseInt(post_offset) + incNumber;
    
            if (projects.getTotal() > projects.getLoaded()) {
                loadingButton.showSpinner($('#load_more'));
                $.ajax({
                    url: ajax_url,
                    type: 'POST',
                    data: {
                        action: 'load_projects',
                        post_offset: post_offset,
                        projects_status: projects_status,
                    },
                    success: function(data) {
                        thisParent.children('.cardsWrapper').append(data);
                        bLazy.revalidate();
                        cardExcerpt();
                        loadingButton.showCaption($('#load_more'));
                        projects.incLoaded();
                        console.info('Ajax: Loaded more %s projects: %d/%d', projects_status, projects.getLoaded(), projects.getTotal());
                        if (projects.getTotal() <= projects.getLoaded()) {
                            loadingButton.hide($('#load_more'));
                        }
                    }
                });
            } else {
                return false;
            }
        }
    })();

    function initTopbar() {
        $('.topbarWrapper').scrollupbar({
            enterViewport: function() {
                $('.topbarWrapper').addClass('topbarWrapper--visible');
            },
            fullyEnterViewport: function() {
                $('#last-event').text('fullyEnterViewport');
            },
            exitViewport: function() {
                $('#last-event').text('exitViewport');
            },
            partiallyExitViewport: function() {
                $('#last-event').text('partiallyExitViewport');
            }
        });
    }
    initTopbar();
    
    if ($(window).width() < 750) {
        $.scrollupbar.destroy('.topbarWrapper');
    }
    
    $(window).scroll(function(event) {
        // didScroll = true;
        var st = $(this).scrollTop();
        // Gdy jesteśmy na samej górze, to pokazyjemy całe logo
        if (st === 0) {
            $('.topbarWrapper').removeClass('topbarWrapper--visible');
        }
    });

    var tabs = (function() {
        var currentTab;
        return {
            init: function() {
                // pobieramy href
                currentTab = $('.tabsMenu__item--current .link--tab').attr('href');
                // href jest jednocześnie id odpowiedniego tabu, który wyświetlamy
                $(currentTab).addClass('tab__content--visible');
                // ładujemy obrazki
                bLazy.load($(".blazy", currentTab), true);
                console.info('Tabs initiated:', currentTab);
            },
            reset: function() {
                // Z tym #tabsReset, to taki hack. Wykorzystywany dlatego, że
                // po kliknięciu chowają się wszystkie taby, oprócz tej z odpowiednim id
                currentTab = $('#tabsReset .link--tab').attr('href');
                $(currentTab).removeClass("tab__content--hidden").addClass("tab__content--visible");
                console.info('Tabs initiated:', currentTab);
            }
        };
    })();
    tabs.init();
    
    $(".global").on('click', '.link--tab', function(event) {
        // wyłącza domyślne przejście na adres linku
        event.preventDefault();
        // dodaje klasę do <li>
        $(this).parent().addClass("tabsMenu__item--current");
        // usuwa klasę z <li>
        $(this).parent().siblings().removeClass("tabsMenu__item--current");
        // pobieramy id z hrefu
        var tab = $(this).attr("href");
        // jeśli blok nie ma takiego id, to chowamy go
        $(".tab__content").not(tab).addClass("tab__content--hidden").removeClass("tab__content--visible");
        // a jeśli ma, to pokazujemy
        $(tab).removeClass("tab__content--hidden").addClass("tab__content--visible");
        // ładujemy obrazki w bloku z odpowiednim id
        bLazy.load($(".blazy", tab), true);
    });

    (function() {
        // https://marcin.laber.pl/2014/09/odmiana-liczebnikow-w-javascript/
        var num = function(value, numerals, wovalue) {
            var t0 = value % 10,
                t1 = value % 100,
                vo = [];
            if (wovalue !== true)
                vo.push(value);
            if (value === 1 && numerals[1])
                vo.push(numerals[1]);
            else if ((value === 0 || (t0 >= 0 && t0 <= 1) || (t0 >= 5 && t0 <= 9) || (t1 > 10 && t1 < 20)) && numerals[0])
                vo.push(numerals[0]);
            else if (((t1 < 10 || t1 > 20) && t0 >= 2 && t0 <= 4) && numerals[2])
                vo.push(numerals[2]);
            return vo[1];
        };
    
        $('.counter').each(function(index) {
            var status = $(this).attr('id');
            var count = parseInt($(this).children('a').html());
            console.log(count, status);
            if (status === 'finished') {
                $(this).find('.counter__label').html(num(count, ["Projektów ukończonych", "Projekt ukończony", "Projekty ukończone"]));
            } else {
                $(this).find('.counter__label').html(num(count, ["Projektów realizowanych", "Projekt realizowany", "Projekty realizowane"]));
            }
        });
    
    })();

    (function() {
        // animacja ze zmieniającym się gradientem obciąża CPU,
        // więc włączam ją tylko, gdy użytkownik dosroluje do końca strony
        $(window).scroll(function () {
           if ($(window).scrollTop() >= $(document).height() - $(window).height() - 500) {
              $('.footer-wrapper').addClass('footer-wrapper--animate');
          } else {
              $('.footer-wrapper').removeClass('footer-wrapper--animate');
          }
        });
    })();

    (function() {
        $(".banner__middleTitle").one('animationend webkitAnimationEnd oAnimationEnd oanimationend MSAnimationEnd',
        function() {
            $(this).removeClass('banner__middleTitle--animation');
        });
        $(".banner__leftTitle").one('animationend webkitAnimationEnd oAnimationEnd oanimationend MSAnimationEnd',
        function() {
            $(this).removeClass('banner__leftTitle--animation');
        });
        $(".banner__rightTitle").one('animationend webkitAnimationEnd oAnimationEnd oanimationend MSAnimationEnd',
        function() {
            $(this).removeClass('banner__rightTitle--animation');
        });
    
    
        $('.banner__left').hover(function() {
            $('.banner__middle').addClass('banner__middle--collapsedL');
            $('.banner__middleTitle').addClass('banner__middleTitle--opacity80');
            $(this).addClass('banner__left--mvR');
        }, function() {
            $('.banner__middle').removeClass('banner__middle--collapsedL');
            $('.banner__middleTitle').removeClass('banner__middleTitle--opacity80');
            $(this).removeClass('banner__left--mvR');
        });
        $('.banner__right').hover(function() {
            $('.banner__middle').addClass('banner__middle--collapsedR');
            $('.banner__middleTitle').addClass('banner__middleTitle--opacity80');
            $(this).addClass('banner__right--mvL');
    
        }, function() {
            $('.banner__middle').removeClass('banner__middle--collapsedR');
            $('.banner__middleTitle').removeClass('banner__middleTitle--opacity80');
            $(this).removeClass('banner__right--mvL');
    
        });
    })();

  });

  // Prezes zawsze na pierwszym miejscu //
  $('.membercard#president').insertBefore('#current_members .cardsWrapper div:eq(0)');

  // Dodaje do <a> klasę "link"
  $('.project__content a').addClass('link');

});
//# sourceMappingURL=data:application/json;base64,
