// main.js //
// Wszystko wrzucamy tu

(function($) {
  'use strict';

  var _destroyFn;

  $.scrollupbar = function($bar, options) {
    // Default options
    options = $.extend({
      enterViewport: $.noop,
      fullyEnterViewport: $.noop,
      exitViewport: $.noop,
      partiallyExitViewport: $.noop
    }, options);

    function isFullyInViewport() {
      return $window.scrollTop() <= $bar.offset().top;
    }

    function isInViewport() {
      return $window.scrollTop() < $bar.offset().top + $bar.outerHeight();
    }

    var $window = $(window),
        $document = $(document),
        minY = $bar.css('position') == 'fixed' ? 0 : $bar.offset().top,
        lastY = $window.scrollTop(), // Use last Y to detect scroll direction.
        initialPosTop = $bar.position().top,
        iOS = /(iPad|iPhone|iPod)/g.test(navigator.userAgent),
        timeout;

    $.scrollupbar.isInViewport = isInViewport();
    $.scrollupbar.isFullyInViewport = isFullyInViewport();

    // iOS can't handle momentum scroll properly (See discussion on
    // http://stackoverflow.com/questions/2863547).
    if (!iOS) {
      $window.on('scroll.scrollupbar', function() {
        var y = $window.scrollTop(),
            barHeight = $bar.outerHeight();

        // Ignore elastic scrolling.
        if (y < 0 || y > ($document.height() - $window.height())) {
          return;
        }

        // Cancel the event fired by the previous scroll.
        if (timeout) {
          clearTimeout(timeout);
        }

        if (y < lastY) { // Scrolling up
          // If the bar is hidden, place it right above the top frame.
          if (!$.scrollupbar.isInViewport && lastY - barHeight >= minY) {
            $bar.css('top', lastY - barHeight);
            $.scrollupbar.isInViewport = true;
            options.enterViewport();
          }

          // Scrolls up bigger than the bar's height fixes the bar on top.
          if (isFullyInViewport()) {
            if (y >= minY) {
              $bar.css({
                'position': 'fixed',
                'top': 0
              });
            } else {
              $bar.css({
                'position': 'absolute',
                'top': initialPosTop
              });
            }

            if (!$.scrollupbar.isFullyInViewport) {
              $.scrollupbar.isFullyInViewport = true;
              options.fullyEnterViewport();
            }
          }

          // Fire an event to reveal the entire bar after 400ms if the scroll
          // wasn't big enough.
          timeout = setTimeout(function() {
            if (!isFullyInViewport()) {
              $bar.css({
                'position': 'fixed',
                'top': $bar.offset().top - y
              });

              $bar.animate({'top': 0}, 100, function() {
                $.scrollupbar.isFullyInViewport = true;
                options.fullyEnterViewport();
              });
            }
          }, 400);
        } else if (y > lastY) { // Scrolling down
          // Unfix the bar allowing it to scroll with the page.
          if ($.scrollupbar.isFullyInViewport) {
            $bar.css({
              'position': 'absolute',
              'top': lastY > minY ? lastY : initialPosTop
            });

            if (!isFullyInViewport()) {
              $.scrollupbar.isFullyInViewport = false;
              options.partiallyExitViewport();
            }
          }

          if ($.scrollupbar.isInViewport && !isInViewport()) {
            $.scrollupbar.isInViewport = false;
            options.exitViewport();
          }

          // Fire an event to hide the entire bar after 400ms if the scroll
          // wasn't big enough.
          timeout = setTimeout(function() {
            if (isInViewport() && y - barHeight >= minY) {
              $bar.animate({'top': y - barHeight}, 100, function() {
                $.scrollupbar.isInViewport = false;
                options.exitViewport();
              });
            }
          }, 400);
        }

        lastY = y;
      });
    } else { // Fallback simplified behaviour for iOS.
      $window.on('touchstart.scrollupbar', function () {
        lastY = $window.scrollTop();
      });

      $window.on('touchend.scrollupbar', function () {
        var y = $window.scrollTop();

        if (y < lastY || y - $bar.outerHeight() < minY) { // Scrolling up
          if (y <= minY) {
            // Restore original position.
            $bar.css({
              'position': 'absolute',
              'top': initialPosTop
            });

            $bar.show(function() {
              $.scrollupbar.isInViewport = true;
              $.scrollupbar.isFullyInViewport = true;
              options.enterViewport();
              options.fullyEnterViewport();
            });
          } else {
            $bar.css({
              'position': 'fixed',
              'top': 0
            });

            $.scrollupbar.isInViewport = true;
            options.enterViewport();

            $bar.slideDown(function() {
              $.scrollupbar.isFullyInViewport = true;
              options.fullyEnterViewport();
            });
          }
        } else if (y > lastY) { // Scrolling down
          $.scrollupbar.isFullyInViewport = false;
          options.partiallyExitViewport();

          $bar.slideUp(function() {
            $.scrollupbar.isInViewport = false;
            options.exitViewport();
          });
        }

        lastY = y;
      });
    }

    _destroyFn = function() {
      // Unbind all listeners added by scrollupbar plugin
      $window.off('.scrollupbar');

      // Restore original bar position.
      $bar.css({
        'position': 'absolute',
        'top': initialPosTop
      });
    };

    return $bar;
  };

  $.scrollupbar.destroy = function() {
    if (_destroyFn) {
      return _destroyFn();
    }
  };

  $.fn.scrollupbar = function(options) {
    return $.scrollupbar(this, options);
  };
})(jQuery);

jQuery(function($) {

  /**
   * Dropy
   * http://codepen.io/Tombek/pen/OPvpLe
   */
  var dropy = {
    $dropys: null,
    openClass: 'open',
    selectClass: 'selected',
    init: function(){
      var self = this;
  
      self.$dropys = $('.dropy');
      self.eventHandler();
    },
    eventHandler: function(){
      var self = this;
  
      // Opening a dropy
      self.$dropys.find('.dropy__title').click(function(){
        self.$dropys.removeClass(self.openClass);
        $(this).parents('.dropy').addClass(self.openClass);
      });
  
      // Click on a dropy list
      self.$dropys.find('.dropy__content ul li a').click(function(){
        var $that = $(this);
        var $dropy = $that.parents('.dropy');
        var $input = $dropy.find('input');
        var $title = $(this).parents('.dropy').find('.dropy__title span');
  
        // Remove selected class
        $dropy.find('.dropy__content a').each(function(){
          $(this).removeClass(self.selectClass);
        });
  
        // Update selected value
        $title.html($that.html());
        $input.val($that.attr('data-value')).trigger('change');
  
        // If back to default, remove selected class else addclass on right element
        if($that.hasClass('dropy__header')){
          $title.removeClass(self.selectClass);
          $title.html($title.attr('data-title'));
        }
        else{
          $title.addClass(self.selectClass);
          $that.addClass(self.selectClass);
        }
  
        // Close dropdown
        $dropy.removeClass(self.openClass);
      });
  
      // Close all dropdown onclick on another element
      $(document).bind('click', function(e){
          if (! $(e.target).parents().hasClass('dropy')){ self.$dropys.removeClass(self.openClass); }
      });
    }
  };
  
  $(function(){
    dropy.init();
  });

    function acts() {
      var te;
      var min = $('.post-list-item-content h2').height();
      $('.post-list-item .post-list-item-content h2').each(function() {
        if ($(this).height() < min)
          min = $(this).height();
      });
  
      $('.post-list-item-content h2').each(function() {
        if ($(this).height() == min) {
          te = $(this).parent().parent().children('.excerpt');
          $(te).text(function(index, currentText) {
            if (currentText.substr(currentText.length - 3) != '\u2026')
              return currentText.substr(0, 150) + '\u2026';
          });
        } else if (($(this).height() < (min - 1) * 3) && ($(this).height() > min)) {
          te = $(this).parent().parent().children('.excerpt');
          $(te).text(function(index, currentText) {
            return currentText.substr(0, 80) + '\u2026';
          });
        } else {
          te = $(this).parent().parent().children('.excerpt');
          $(this).text(function(index, currentText) {
            if ((currentText.substr(currentText.length - 3) != '\u2026') && (currentText.length > 120))
              return currentText.substr(0, 120) + '\u2026';
          });
          te.css("display", "none");
        }
      });
    }
    acts();
    $(window).resize(acts);
  
     function cardExcerpt() {
      $(".card__excerpt").text(function(index, currentText) {
        return currentText.substr(0, 140) + '\u2026';
      });
    }
    cardExcerpt();

  // Pakuje mniejsze obrazki bez podpisu w <figure> //
  // Jeśli obrazek ma tytuł, tym się zajmuje php funkcja w project-functions.php
  $('.project__content p').each(function(index) {
    var some_img = $(this).find('img');
    var width = some_img.width();
    if (width < 980) {
      some_img.wrap("<figure></figure>");
    }
  });

  //Skraca imiona, by nie wychodziły za bloki
  $('.membercard__name a').each(function(index) {
    var length = $(this).html().length;
    if (length > 17) {
      var name = $(this).text();
      $(this).parent().addClass('membercard__name--tooLong');
      // console.log(name);
      var trimmed_name = name.charAt(0) + ". " + name.substr(name.indexOf(' ') + 1);
      // console.log(trimmed_name);
      $(this).text(trimmed_name);
    }
  });

  // Notyfikacje, powiadomienia //
  $(".note-close").click(function() {
    $(this).parent()
      .animate({
        opacity: 0
      }, 250, function() {
        $(this)
          .animate({
            marginBottom: 0
          }, 250)
          .children()
          .animate({
            padding: 0
          }, 250)
          .wrapInner("<div />")
          .children()
          .slideUp(250, function() {
            $(this).closest(".note").remove();
          });
      });
  });

  // Animacje dla banera rekrutacji //
  $('label.button').on('click', function() {
    $('.fb').addClass('animated fadeInUp');
    $('.date .icon-container').addClass('animated slideInLeft');
    $('.date span').addClass('animated slideInLeft');
    $('.location .icon-container').addClass('animated slideInRight');
    $('.location span').addClass('animated slideInRight');
  
  });
  $('#close_banner').on('click', function() {
    $('.fb').removeClass('animated fadeInUp');
    $('.date .icon-container').removeClass('animated slideInLeft');
    $('.date span').removeClass('animated slideInLeft');
    $('.location .icon-container').removeClass('animated slideInRight');
    $('.location span').removeClass('animated slideInRight');
  });
  
  // http://stackoverflow.com/questions/24070627/create-dropdown-banner-when-user-first-visits-website
  // Pozwalają otwierać baner tylko przy pierwszej wizycie
  
  // cookie-js

  //// = partials/show-nicknames.js

  $(document).ready(function(){
      // $("#nav-mobile").html($("#nav-main").html());
      $("#nav-trigger .navicon-button").click(function(){
        console.info('Burger clicked');
          if ($("#nav ul").hasClass("nav__menu--expanded")) {
              $("#nav ul").removeClass("nav__menu--expanded").slideUp(250);
              $(this).removeClass("open");
          } else {
              $("#nav ul").addClass("nav__menu--expanded").slideDown(250);
              $(this).addClass("open");
          }
      });
  });

  $(document).ready(function() {
    Slider = $('#slider').Swipe({
      auto: 0,
      continuous: true,
    }).data('Swipe');
    if (Slider) {
      $('.next').on('click', Slider.next);
      $('.prev').on('click', Slider.prev);
    }
  });

  // przez to gnwo nie działa .on()
  ////= partials/smooth-scrolling.js

  

  $(document).ready(function() {
      var bLazy = new Blazy({
        offset: 20,
        selector: '.blazy',
        loadInvisible: false,
        breakpoints: [{
          width: 360, // Max-width
          src: 'data-src-small'
        }],
        success: function(element) {
          $(element).parent().removeClass('loading', 500);
          updateCounter();
        },
        error: function(element, msg) {
          if (msg === 'missing') {
            $(element).parent().removeClass('loading', 500); // Data-src is missing
            console.error("bLazy: data-src is missing");
          } else if (msg === 'invalid') {
            $(element).parent().removeClass('loading', 500);
            // Data-src is invalid
            console.error("bLazy: data-src is invalid");
    
          }
        }
      });
      // not needed, only here to illustrate amount of loaded images
      var imageLoaded = 0;
    
      function updateCounter() {
        imageLoaded++;
        console.info("bLazy: Images loaded: %d", imageLoaded);
      }
    
      // tabs(bLazy);

    // Zwraca stan animacji. Jeśli true, to animacja zostanie odpalona
    var animationState = (function() {
        var value = true;
        return {
            change: function() {
                value = !value;
            },
            value: function() {
                return value;
            }
        };
    })();
    
    (function() {
        'strict use';
        var ajax_url = jQuery('.global').attr('data-ajax-url');
        var membercard;
        var memberWrapper = $('.memberWrapper');
    
        $('.link--name').on('click', changePage);
        $(window).on('popstate', changePage);
    
        function changePage(event) {
            var prevUrl = window.location.href;
            // KLIK //
            if (event.type === 'click') {
                event.preventDefault();
                // Skrolujemy do góry, by pokazać topbar
                $('html').scrollTop(0);
    
                console.log(event.type);
                membercard = $(this).parents('.membercard');
                var id = membercard.attr('data-id');
                var memberUrl = membercard.find('.link--name').attr('href');
                changeUrl(memberUrl);
                animateMemberPage('hide');
    
                // zapobiega powtórnemu ładowaniu tego samego członka
                if (memberWrapper.attr('data-current-member') !== id) {
                    request({
                        action: 'load_member_page',
                        id: id
                    }, addData);
                    changeAttrId(id);
                    animateOverlay();
    
                } else {
                    animateMemberPage('show');
                    animateOverlay();
                }
                // TĘDY-SIĘDY //
            } else if (event.type === 'popstate') {
                console.log(event.type);
                animateOverlay();
                changeUrl(prevUrl);
                tabs.reset();
            }
        }
    
        function animateOverlay() {
            if (animationState.value()) {
                $('.memberOverlay').addClass('memberOverlay--visible');
                $('html').css({'overflow': 'hidden'});
                $.scrollupbar.destroy('.topbarWrapper');
    
                console.log("Changing state:", animationState.value());
            } else {
                initTopbar();
                $('.memberOverlay').removeClass('memberOverlay--visible');
                $('html').css({'overflow': 'auto'});
    
                console.log("Changing state:", animationState.value());
            }
            animationState.change();
            console.log("State changed to:", animationState.value());
        }
    
        function animateMemberPage(state) {
            if (state === 'show') {
                memberWrapper.removeClass('hidden');
            } else if (state === 'hide') {
                memberWrapper.addClass('hidden');
            }
        }
    
        function changeUrl(url) {
            if (url != window.location) {
                //add the new page to the window.history
                window.history.pushState({
                    path: url
                }, '', url);
            }
        }
        // Dodaje dane w odpowiednie miejsce
        var addData = function(data) {
            // jeśli już coś jest, to usuwa
            if (memberWrapper.children().length > 1) {
                memberWrapper.empty();
            }
            animateMemberPage('show');
            memberWrapper.append(data);
            tabs.init();
        };
    
        function request(requestingData, addData) {
            $.ajax({
                url: ajax_url,
                type: 'POST',
                data: requestingData,
                success: function(data) {
                    addData(data);
                    console.log('Data loaded');
                    bLazy.revalidate();
                },
                error: function(errorThrown) {
                    console.error(errorThrown);
                }
            });
        }
    
        function changeAttrId(id) {
            memberWrapper[0].setAttribute('data-current-member', id);
        }
    
        $('.memberOverlay').on('scroll', function () {
            $('html').scrollTop($(this).scrollTop());
        });
    })();

    // http://arresteddeveloper.net/wordpress-infinite-scroll-with-wordpress-posts-and-waypoints-js/
    
    // Chyba z tego zrobić należy objekt
    
    var project_status = $('#finished_projects').attr('data-projects-status');
    var ajax_url = jQuery('#projects').attr('data-ajax-url');
    var total_finished_projects = jQuery('#finished_projects').attr('data-total-finished-projects');
    var total_in_progress_projects = jQuery('#in_progress_projects').attr('data-total-in-progress-projects');
    var total_ideas_projects = jQuery('#ideas_projects').attr('data-total-ideas-projects');
    var post_offset = 0;
    var loaded_finished_projects = 0;
    
    // Skrolujemy do stopki, wtedy uruchamia się funkcja loadProjects()
    if (ajax_url) {
      $(window).scroll(function() {
        if ($(window).scrollTop() >= $(document).height() - $(window).height() - 100) {
          if ($('#ideas_projects').is(':visible')) {
            loaded_ideas_projects = $('#ideas_projects').children().length;
            loadProjects('ideas', total_ideas_projects, loaded_ideas_projects);
          }
          else if ($('#in_progress_projects').is(':visible')) {
            loaded_in_progress_projects = $('#in_progress_projects').children().length;
            loadProjects('in_progress', total_in_progress_projects, loaded_in_progress_projects);
          }
          else if ($('#finished_projects').is(':visible')) {
            loaded_finished_projects = $('#finished_projects').children().length;
            loadProjects('finished', total_finished_projects, loaded_finished_projects);
          }
        }
      });
    }
    
    
    function loadProjects(projects_status, total_projects, loaded_projects) {
      post_offset = parseInt(post_offset) + 6;
      console.info("Loaded %s projects: %d/%d",projects_status, loaded_projects, total_projects);
    
      if (total_projects > loaded_projects) {
        $('.loader').show();
        $.ajax({
          url: ajax_url,
          type: 'POST',
          data: {
            action: 'load_projects',
            post_offset: post_offset,
            projects_status: projects_status,
          },
          success: function(data) {
            $('#' + projects_status + '_projects').append(data);
            // $(data).hide().appendTo('#' + projects_status + '_projects').show(200);
            console.info('Ajax: Loaded more %s projects', projects_status);
            bLazy.revalidate();
            cardExcerpt();
            $('.loader').hide();
          }
        });
      } else {
        return false;
      }
    }

    function initTopbar() {
        $('.topbarWrapper').scrollupbar({
            enterViewport: function() {
                $('.topbarWrapper').addClass('topbarWrapper--visible');
            },
            fullyEnterViewport: function() {
                $('#last-event').text('fullyEnterViewport');
            },
            exitViewport: function() {
                $('#last-event').text('exitViewport');
            },
            partiallyExitViewport: function() {
                $('#last-event').text('partiallyExitViewport');
            }
        });
    }
    initTopbar();
    
    if ($(window).width() < 750) {
        $.scrollupbar.destroy('.topbarWrapper');
    }
    
    $(window).scroll(function(event) {
        // didScroll = true;
        var st = $(this).scrollTop();
        // Gdy jesteśmy na samej górze, to pokazyjemy całe logo
        if (st === 0) {
            $('.topbarWrapper').removeClass('topbarWrapper--visible');
        }
    });

    var tabs = (function() {
        var currentTab;
        return {
            init: function() {
                // pobieramy href
                currentTab = $('.tabsMenu__item--current .link--tab').attr('href');
                // href jest jednocześnie id odpowiedniego tabu, który wyświetlamy
                $(currentTab).addClass('tab__content--visible');
                // ładujemy obrazki
                bLazy.load($(".blazy", currentTab), true);
                console.info('Tabs initiated:', currentTab);
            },
            reset: function() {
                // Z tym #tabsReset, to taki hack. Wykorzystywany dlatego, że
                // po kliknięciu chowają się wszystkie taby, oprócz tej z odpowiednim id
                currentTab = $('#tabsReset .link--tab').attr('href');
                $(currentTab).removeClass("tab__content--hidden").addClass("tab__content--visible");
                console.info('Tabs initiated:', currentTab);
            }
        };
    })();
    tabs.init();
    
    $(".global").on('click', '.link--tab', function(event) {
        // wyłącza domyślne przejście na adres linku
        event.preventDefault();
        // dodaje klasę do <li>
        $(this).parent().addClass("tabsMenu__item--current");
        // usuwa klasę z <li>
        $(this).parent().siblings().removeClass("tabsMenu__item--current");
        // pobieramy id z hrefu
        var tab = $(this).attr("href");
        // jeśli blok nie ma takiego id, to chowamy go
        $(".tab__content").not(tab).addClass("tab__content--hidden").removeClass("tab__content--visible");
        // a jeśli ma, to pokazujemy
        $(tab).removeClass("tab__content--hidden").addClass("tab__content--visible");
        // ładujemy obrazki w bloku z odpowiednim id
        bLazy.load($(".blazy", tab), true);
    });

  });

  // Prezes zawsze na pierwszym miejscu //
  $('#management_board li#admin').insertBefore('#management_board li:eq(0)');

  // Dodaje do <a> klasę "link"
  $('.project__content a').addClass('link');

});
//# sourceMappingURL=data:application/json;base64,
